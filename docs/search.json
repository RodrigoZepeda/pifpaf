[{"path":"https://rodrigozepeda.github.io/pifpaf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 pifpaf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rodrigo Zepeda-Tello. Author, maintainer. Dalia Camacho-García-Formentí. Author. Francisco Reyes. Author. Tonatiuh Barrientos-Gutiérrez. Contributor. Ana Basto-Abreu. Contributor. Ariela Braverman-Bronstein. Contributor. Dèsirée Vidaña-Pérez. Contributor. Frederick Cudhea. Contributor.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zepeda-Tello R, Camacho-García-Formentí D, Reyes F (2023). pifpaf: Potential Impact Fraction Population Attributable Fraction Cross-Sectional Data. R package version 2.0.0, https://rodrigozepeda.github.io/pifpaf/.","code":"@Manual{,   title = {pifpaf: Potential Impact Fraction and Population Attributable Fraction for Cross-Sectional Data},   author = {Rodrigo Zepeda-Tello and Dalia Camacho-García-Formentí and Francisco Reyes},   year = {2023},   note = {R package version 2.0.0},   url = {https://rodrigozepeda.github.io/pifpaf/}, }"},{"path":"https://rodrigozepeda.github.io/pifpaf/index.html","id":"pifpaf-potential-impact-fraction-and-population-attributable-fraction-estimation-","dir":"","previous_headings":"","what":"pifpaf package","title":"pifpaf package","text":"STILL WORK PROCESS pifpaf package corresponds update previous homonimous package developed INSP.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"pifpaf package","text":"can install development version pifpaf GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"RodrigoZepeda/pifpaf\")"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/ensanut.html","id":null,"dir":"Reference","previous_headings":"","what":"ENSANUT 2018 — ensanut","title":"ENSANUT 2018 — ensanut","text":"Data Mexican National Health Nutrition Survey 2018 (ENSANUT-2018).","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/ensanut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ENSANUT 2018 — ensanut","text":"","code":"ensanut"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/ensanut.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ENSANUT 2018 — ensanut","text":"Information contains: tibble containing following information age Age individual (years). sex Sex individual (Male Female). weight Survey weights associated survey. strata Strata survey. hypertension individual hypertension TRUE, FALSE otherwise. delta_na_phase_1 Proposed change sodium consumption (counterfactual). systolic_blood_pressure Mean systolic blood pressure individual registered survey. age_group Age group individual","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/ensanut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ENSANUT 2018 — ensanut","text":"","code":"ensanut #> # A tibble: 1,333 × 8 #>      age sex     weight strata hypertension delta_na_phase_1 #>    <dbl> <chr>    <dbl>  <dbl> <lgl>                   <dbl> #>  1    28 Female  32134.    222 FALSE                    5.90 #>  2    24 Female  75955.    222 FALSE                   19.1  #>  3    45 Female  16076.    222 FALSE                   49.5  #>  4    39 Male    83463.    222 FALSE                    6.27 #>  5    41 Male    84735.    223 FALSE                    0    #>  6    61 Male   118741.    223 FALSE                    0    #>  7    46 Female  44085.    223 FALSE                   40.0  #>  8    48 Female  73051.    223 FALSE                   79.4  #>  9    23 Female  26276.    122 FALSE                   26.2  #> 10    69 Female  52114.    122 FALSE                    8.69 #> # ℹ 1,323 more rows #> # ℹ 2 more variables: systolic_blood_pressure <dbl>, age_group <fct> #Create a survey design as follows: options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/internal_pif_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Pif from dataframe — internal_pif_data_frame","title":"Pif from dataframe — internal_pif_data_frame","text":"Pif dataframe","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/internal_pif_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pif from dataframe — internal_pif_data_frame","text":"","code":"internal_pif_data_frame(df, theta, rr, cft, weights = NULL, is_paf = FALSE)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/internal_pif_data_frame.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pif from dataframe — internal_pif_data_frame","text":"previous version package function called pif.empirical.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":null,"dir":"Reference","previous_headings":"","what":"Potential Impact Fraction — pif","title":"Potential Impact Fraction — pif","text":"Function estimating Potential Impact Fraction pif cross-sectional sample exposure X known Relative Risk function rr parameter theta, Potential Impact Fraction given : $$ PIF =   \\frac{E_X\\left[rr(X;\\theta)\\right] -   E_X\\left[rr\\big(\\textrm{cft}(X);\\theta\\big)\\right]}   {E_X\\left[rr(X;\\theta)\\right]}. $$","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Potential Impact Fraction — pif","text":"","code":"pif(   X,   thetahat,   rr,   cft = NA,   method = \"empirical\",   weights = rep(1/nrow(as.matrix(X)), nrow(as.matrix(X))),   Xvar = var(X),   deriv.method.args = list(),   deriv.method = \"Richardson\",   adjust = 1,   n = 512,   ktype = \"gaussian\",   bw = \"SJ\",   check_exposure = TRUE,   check_integrals = TRUE,   check_rr = TRUE,   is_paf = FALSE )"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Potential Impact Fraction — pif","text":"X Exposure covariates.Can following: (data.frame) individual level data, (vector) aggregated means exposure covariates. thetahat (vector) Parameter relative risk function. rr (function) Relative Risk function uses parameter theta. order (naming) parameters rr(X, theta). Optional cft (function) Relative Risk function uses parameter theta. order (naming) parameters rr(X, theta). Population Attributable Fraction paf counterfactual theoretical minimum risk exposure X0 rr(X0,theta) = 1. n Number equally spaced points density (\"kernel\" method) estimated (see density). derivative_method (string) following:","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Potential Impact Fraction — pif","text":"pif      Estimate Potential Impact Fraction.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Potential Impact Fraction — pif","text":"\"empirical\" method estimates pif $$ PIF   = 1 - \\frac{\\sum\\limits_{=1}^{n}w_i rr\\big(cft(X_i);   \\theta\\big)}{\\sum\\limits_{=1}^{n} w_i rr(X_i; \\theta)}. $$ \"kernel\" method approximates density exposure X estimates expected value approximation: $$ PIF = 1 -         \\frac{\\int\\limits_{-\\infty}^{\\infty} rr\\big(cft(X);\\theta \\big) \\hat{f}(x) dx   }{         \\int\\limits_{-\\infty}^{\\infty} rr\\big(cft(X);\\theta \\big) \\hat{f}(x) dx}.   $$ \"approximate\" method conducts Laplace approximation pif. Additional information methods dicussed package's vignette: browseVignettes(\"pifpaf\"). practice \"approximate\" method last choice. Simulations shown \"empirical\"'s convergence faster \"kernel\" functions. addition, scope \"kernel\" limited work multivariate exposure data X.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Potential Impact Fraction — pif","text":"information kernels see density. use $ operator using \"approximate\" method.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Potential Impact Fraction — pif","text":"Vander Hoorn, S., Ezzati, M., Rodgers, ., Lopez, . D., & Murray, C. J. (2004). Estimating attributable burden disease exposure hazard data. Comparative quantification health risks: global regional burden disease attributable selected major risk factors. Geneva: World Health Organization, 2129-40.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Potential Impact Fraction — pif","text":"Rodrigo Zepeda-Tello rzepeda17@gmail.com Dalia Camacho-García-Formentí daliaf172@gmail.com","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Potential Impact Fraction — pif","text":"","code":"#Example 1: Exponential Relative Risk #-------------------------------------------- set.seed(18427) X        <- data.frame(Exposure = rnorm(100,3,1)) thetahat <- 0.12 rr       <- function(X, theta){exp(theta*X)}  #Without specifying counterfactual pif matches paf pif(X, thetahat, rr) #> [1] 2 paf(X, thetahat, rr) #> Error in paf(X, thetahat, rr): could not find function \"paf\"  #Same example with kernel method pif(X, thetahat, rr, method = \"kernel\") #> [1] 2  #Same example with approximate method Xmean <- data.frame(Exposure = mean(X[,\"Exposure\"])) Xvar  <- var(X[,\"Exposure\"]) pif(Xmean, thetahat, rr, method = \"approximate\", Xvar = Xvar) #> [1] 2  #Same example considering counterfactual of halving exposure cft   <- function(X){ 0.5*X } pif(X, thetahat, rr, cft, method = \"empirical\") #> [1] 2  #Example 2: Linear Relative Risk #-------------------------------------------- set.seed(18427) X        <- data.frame(Exposure = rbeta(100,3,1)) thetahat <- 0.12 rr       <- function(X, theta){theta*X + 1} cft      <-  function(X){ 0.5*X } weights             <- runif(100) normalized_weights  <- weights/sum(weights) pif(X, thetahat, rr, cft, weights = normalized_weights) #> [1] 2  #Same example with more complex counterfactual that reduces #only the values > 0.75 are halved cft       <- function(X){     #Indentify the ones with \"a lot\" of exposure:    where_excess_exposure    <- which(X[,\"Exposure\"] > 0.75)     #Halve their exposure    X[where_excess_exposure, \"Exposure\"] <-             X[where_excess_exposure, \"Exposure\"]/2    return(X) } pif(X, thetahat, rr, cft, weights = normalized_weights) #> [1] 2   #Example 3: Multivariate Linear Relative Risk #-------------------------------------------- set.seed(18427) X1       <- rnorm(100,4,1) X2       <- rnorm(100,2,0.4) X        <- data.frame(Exposure = X1, Covariate = X2) thetahat <- c(0.12, 0.03)  #When creating relative risks and counterfactuals avoid using $ operator #as it doesn't work under approximate method rr_not    <- function(X, theta){                exp(theta[1]*X$Exposure + theta[2]*X$Covariate)              } rr_better <- function(X, theta){                exp(theta[1]*X[,\"Exposure\"] + theta[2]*X[,\"Covariate\"])              }  #Creating a counterfactual. cft  <- function(X){    Y               <- X    Y[,\"Exposure\"]  <- 0.5*X[,\"Exposure\"]    Y[,\"Covariate\"] <- 1.1*X[,\"Covariate\"] + 1    return(Y) } pif(X, thetahat, rr_better, cft) #> [1] 2  #Same multivariate example for approximate method calculating #mean and variance Xmean <- data.frame(Exposure = mean(X$Exposure),                    Covariate = mean(X$Covariate)) Xvar  <- var(X) pif(Xmean, thetahat, rr_better, method = \"approximate\", Xvar = Xvar) #> [1] 2  if (FALSE) { #The one with $ operators doesn't work: pif(Xmean, thetahat, rr_not, method = \"approximate\", Xvar = Xvar) } if (FALSE) { #Warning: Multivariate cases cannot be evaluated with kernel method pif(X, thetahat, rr_better, method = \"kernel\") }  #Example 4: Categorical Relative Risk & Exposure #-------------------------------------------- set.seed(18427) mysample  <- sample(c(\"Normal\",\"Overweight\",\"Obese\"), 100,                    replace = TRUE, prob = c(0.4, 0.1, 0.5)) X        <- data.frame(Exposure = mysample)  thetahat <- c(1, 1.2, 1.5)  #Categorical relative risk function rr <- function(X, theta){     #Create return vector with default risk of 1    r_risk <- rep(1, nrow(X))     #Assign categorical relative risk    r_risk[which(X[,\"Exposure\"] == \"Normal\")]      <- thetahat[1]    r_risk[which(X[,\"Exposure\"] == \"Overweight\")]  <- thetahat[2]    r_risk[which(X[,\"Exposure\"] == \"Obese\")]       <- thetahat[3]     return(r_risk) }  pif(X, thetahat, rr, check_rr = FALSE) #> [1] 2  #Counterfactual of reducing all obesity to normality cft <- function(X){    X[which(X[,\"Exposure\"] == \"Obese\"),] <- \"Normal\"    return(X) }  pif(X, thetahat, rr, cft, check_rr = FALSE) #> [1] 2  #Example 5: Categorical Relative Risk & continuous exposure #---------------------------------------------------------- set.seed(18427) BMI      <- data.frame(Exposure = rlnorm(100, 3.1, sdlog = 0.1))  #Theoretical minimum risk exposure is at 20kg/m^2 in borderline \"Normal\" category BMI_adjusted <- BMI - 20  thetahat <- c(Malnourished = 2.2, Normal = 1, Overweight = 1.8,               Obese = 2.5)  rr       <- function(X, theta){       #Create return vector with default risk of 1      r_risk <- rep(1, nrow(X))       #Assign categorical relative risk      r_risk[which(X[,\"Exposure\"] < 0)]             <- theta[1] #Malnourished      r_risk[intersect(which(X[,\"Exposure\"] >= 0),                       which(X[,\"Exposure\"] < 5))]  <- theta[2] #Normal      r_risk[intersect(which(X[,\"Exposure\"] >= 5),                       which(X[,\"Exposure\"] < 10))] <- theta[3] #Overweight      r_risk[which(X[,\"Exposure\"] >= 10)]           <- theta[4] #Obese     return(r_risk) }  #Counterfactual of everyone in normal range cft <- function(bmi){      bmi           <- data.frame(rep(2.5, nrow(bmi)), ncol = 1)      colnames(bmi) <- c(\"Exposure\")      return(bmi) }  pif(BMI_adjusted, thetahat, rr, cft,     check_exposure = FALSE, method = \"empirical\") #> [1] 2   #Example 6: Bivariate exposure and rr (\"classical PAF\") #------------------------------------------------------------------ set.seed(18427) mysample  <- sample(c(\"Exposed\",\"Unexposed\"), 1000,                 replace = TRUE, prob = c(0.1, 0.9)) X         <- data.frame(Exposure = mysample) theta     <- c(\"Exposed\" = 2.5, \"Unexposed\" = 1.2) rr        <- function(X, theta){     #Create relative risk function    r_risk <- rep(1, nrow(X))     #Assign values of relative risk    r_risk[which(X[,\"Exposure\"] == \"Unexposed\")] <- theta[\"Unexposed\"]    r_risk[which(X[,\"Exposure\"] == \"Exposed\")]   <- theta[\"Exposed\"]     return(r_risk) }  #Counterfactual of reducing the exposure in half of the individuals cft <- function(X){     #Find out which ones are exposed    Xexp  <- which(X[,\"Exposure\"] == \"Exposed\")     #Use only half of the exposed randomly    reduc <- sample(Xexp, length(Xexp)/2)     #Unexpose those individuals    X[reduc, \"Exposure\"] <- \"Unexposed\"     return(X) }  pif(X, theta, rr, cft) #> [1] 2  #Example 7: Continuous exposure, several covariates #------------------------------------------------------------------ X <- data.frame(Exposure = rbeta(100, 2, 3),                 Age      = runif(100, 20, 100),                 Sex      = sample(c(\"M\",\"F\"), 100, replace = TRUE),                 BMI      = rlnorm(100, 3.2, 0.2)) thetahat <- c(-0.1, 0.05, 0.2, -0.4, 0.3, 0.1)  rr <- function(X, theta){      #Create risk vector      Risk    <- rep(1, nrow(X))       #Identify subpopulations      males   <- which(X[,\"Sex\"] == \"M\")      females <- which(X[,\"Sex\"] == \"F\")       #Calculate population specific rr      Risk[males] <- theta[1]*X[males,\"Exposure\"] +                                       theta[2]*X[males,\"Age\"]^2 +                                       theta[3]*X[males,\"BMI\"]/2       Risk[females] <- theta[4]*X[females,\"Exposure\"] +                                       theta[5]*X[females,\"Age\"]^2 +                                       theta[6]*X[females,\"BMI\"]/2      return(Risk) }  #Counterfactual of reducing BMI cft <- function(X){     excess_bmi           <- which(X[,\"BMI\"] > 25)     X[excess_bmi,\"BMI\"]  <- 25     return(X) }  pif(X, thetahat, rr, cft) #> [1] 2"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Pif from dataframe — pif_data_frame","title":"Pif from dataframe — pif_data_frame","text":"Pif dataframe","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pif from dataframe — pif_data_frame","text":"","code":"pif_data_frame(df, theta, rr, cft, weights = NULL, is_paf = FALSE)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_data_frame.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pif from dataframe — pif_data_frame","text":"previous version package function called pif.empirical.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"Estimates potential impact fraction, pif, individual-level exposure data (covariates), X, cross-sectional survey. Exposure assumed associated relative risk function, rr, parameter theta. counterfactual scenario function exposure cft assumed. potential impact fraction defined Chan et al. (2023) :   \\[  \\text{PIF} = \\dfrac{\\mathbb{E}\\Big[RR(X;\\theta)\\Big] -    \\mathbb{E}\\Big[RR\\big(\\text{cft}(X);\\theta\\big)\\Big]}{\\mathbb{E}\\Big[RR(X;\\theta)\\Big]} \\] : \\(X\\) denotes individual-level matrix exposure covariates, \\(\\theta\\) represents additional parameters relative risk function, \\(RR(X,\\theta)\\) denotes relative risk exposure (covariates) level \\(X\\) given parameters \\(\\theta\\), \\(cft(X)\\) denotes counterfactual function applied exposure covariates, \\({\\mathbb{E}\\Big[RR(X;\\theta)\\Big]}\\) \\({\\mathbb{E}\\Big[RR(\\text{cft}(X);\\theta)\\Big]}\\) denote population average relative risk current (observed) conditions relative risk counterfactual scenario. \\(\\text{PIF}\\) represents potential impact fraction.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"","code":"pif_survey_bootstrap(   design,   theta,   rr,   cft,   additional_theta_arguments,   n_bootstrap_samples = NULL,   theta_distribution = \"default\",   uncertainty_interval_type = c(\"wald\", \"percentile\"),   parallel = TRUE,   num_cores = 1,   confidence_level = 0.95,   return_replicates = FALSE,   is_paf = FALSE,   ... )"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"design (survey.design/svyrep.design) survey design structure survey package obtained survey::svydesign() survey replicates design obtained either survey::svrepdesign() svrep::as_bootstrap_design(). Contains individual level exposure covariates. theta (vector/double) parameters relative risk function rr. rr (function) relative risk function two parameters: data.frame called X containing individual-level exposure covariates, theta (order). cft (function) counterfactual function takes data.frame, X, individual-level exposure covariates returns new data.frame individual-level counterfactual exposure covariates. additional_theta_arguments additional information theta utilized obtaining bootstrap samples paramter. Options : (double) variance theta theta one dimensional asymptotical normality assumed (default). (vector) variances entry theta theta n-dimensional entries uncorrelated asymptotical normality assumed (default). (matrix) variance-covariance matrix theta theta n-dimensional entries correlated asymptotical normality assumed (default). list arguments pass via base::.call() theta_distribution simulate samples theta theta assumed asymptotically normally distributed. Optional n_bootstrap_samples (double) number bootstrap samples. svyrep.design passed argument, n_bootstrap_samples represents number number replicates design. theta_distribution (function) random number generator follows distribution estimator theta. default, theta assumed asymptotically normal thus theta_distribution set mvtnorm::rmvnorm() variance given additional_theta_arguments. number simulations theta_distribution function must parametrized parameter name n. uncertainty_interval_type (string) either 'wald' (recommended) 'percentile' uncertainty intervals based upon bootstrap's percentile Wald-type approximation (see confidence interval section) parallel (boolean) Flag indicating whether computations parallel. Default TRUE. num_cores (int) Number cores; defaults parallel::detectCores(). confidence_level (double) Confidence level uncertainty interval. Defaults 0.95. return_replicates (boolean) Whether return simulated impact fractions . is_paf (boolean) Whether function estimated Population Attributable Fraction (is_paf = TRUE) Potential Impact Fraction (is_paf = FALSE) ... Additional parameters svrep::as_bootstrap_design().","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"confidence-intervals","dir":"Reference","previous_headings":"","what":"Confidence Intervals","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"Confidence intervals estimated via two methods specified Arnab (2017) . Wald-type confidence intervals (precise) form: \\[ \\widehat{\\text{PIF}} \\pm t_{1 - \\alpha/2} \\sqrt{\\widehat{\\text{Var}}_{\\text{B}}\\big[\\widehat{\\text{PIF}}\\big]} \\] \\(t_{1 - \\alpha/2}\\) stands percent points level \\(1 - \\alpha/2\\) Student's t-distribution, \\(\\widehat{\\text{Var}}_{\\text{B}}\\big[\\widehat{\\text{PIF}}\\big]\\) represents estimated variance (via bootstrap) potential impact fraction estimator. Percentile confidence intervals (less precise) form: \\[ \\Big[\\widehat{\\text{PIF}}_{\\text{B},\\alpha/2}, \\widehat{\\text{PIF}}_{\\text{B},1-\\alpha/2}\\Big] \\] \\(\\widehat{\\text{PIF}}_{\\text{B},k}\\) represents kth sample quantile bootstrap simulation potential impact fraction estimator.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"additional-parallelization-options","dir":"Reference","previous_headings":"","what":"Additional parallelization options","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"default function uses foreach::foreach parallelize creating cluster via doParallel::registerDoParallel. finner parallelization control can :","code":"#Create the cluster outside using whatever you want myCluster <- parallel::makeCluster(3, type = \"PSOCK\")  #Register the cluster doParallel::registerDoParallel(myCluster)  #Call the function using parallel = TRUE to use %dopar% and num_cores = NULL to avoid setting pif_survey_bootstrap(..., parallel = TRUE, num_cores = NULL)  #Stop the cluster doParallel::stopCluster(myCluster)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"Arnab R (2017). “Survey sampling theory applications.” chapter Variance Estimation: Complex Survey Designs. Academic Press. Chan CE, Zepeda-Tello R, Camacho-García-Formentí D, Cudhea F, Meza R, Rodrigues E, Spiegelman D, Barrientos-Gutierrez T, Zhou X (2023). “Nonparametric Estimation Potential Impact Fraction Population Attributable Fraction Individual-Level Aggregated Data.” 2207.03597.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"","code":"#Use the ensanut dataset data(ensanut)  #EXAMPLE 1 #Setup the survey design options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta){exp(-2 +     theta[1]*X[,\"age\"] + theta[2]*X[,\"systolic_blood_pressure\"]/100)} cft <- function(X){X[,\"systolic_blood_pressure\"] <- X[,\"systolic_blood_pressure\"] - 5; return(X)} pif_survey_bootstrap(design, theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE) #> $Point #> [1] 0.01599271 #>  #> $Interval #>        Lower        Upper  #> -0.002657928  0.034643354  #>  #> $Confidence #> [1] 0.95 #>  #> $Standard_Deviation #> [1] 0.008370502 #>   #EXAMPLE 2 #Now do the same but using a replicate design options(survey.lonely.psu = \"adjust\") rep_design <- svrep::as_bootstrap_design(design, replicates = 10) pif_survey_bootstrap(rep_design, theta = log(c(1.05, 1.38)), rr, cft,     additional_theta_arguments = c(0.01, 0.03)) #> $Point #> [1] 0.01868419 #>  #> $Interval #>       Lower       Upper  #> 0.002745184 0.034623203  #>  #> $Confidence #> [1] 0.95 #>  #> $Standard_Deviation #> [1] 0.007153508 #>"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pifpaf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pifpaf: Potential Impact Fraction and Population Attributable Fraction for Cross-Sectional Data — pifpaf-package","title":"pifpaf: Potential Impact Fraction and Population Attributable Fraction for Cross-Sectional Data — pifpaf-package","text":"Description: Uses generalized method estimate Potential Impact Fraction (PIF) Population Attributable Fraction (PAF) cross-sectional data. creates point-estimates, confidence intervals, estimates variance. addition, generates plots conducting sensitivity analysis.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pifpaf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pifpaf: Potential Impact Fraction and Population Attributable Fraction for Cross-Sectional Data — pifpaf-package","text":"Maintainer: Rodrigo Zepeda-Tello rzepeda17@gmail.com Authors: Dalia Camacho-García-Formentí Francisco Reyes contributors: Tonatiuh Barrientos-Gutiérrez [contributor] Ana Basto-Abreu [contributor] Ariela Braverman-Bronstein [contributor] Dèsirée Vidaña-Pérez [contributor] Frederick Cudhea [contributor]","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_confidence_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate confidence level — validate_confidence_level","title":"Validate confidence level — validate_confidence_level","text":"function takes confidence level input. can inputed : number 0 1. number 1 100 divided 100. input generates error.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_confidence_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate confidence level — validate_confidence_level","text":"","code":"validate_confidence_level(confidence_level = 0.95)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_confidence_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate confidence level — validate_confidence_level","text":"confidence_level (double) Confidence level uncertainty interval. 0 1 uses . 1 100 divides 100 transform probability. Defaults 0.95.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_confidence_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate confidence level — validate_confidence_level","text":"(double) list containing confidence level 0 1, values alpha 1 - alpha/2.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_is_paf.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the is_paf parameter — validate_is_paf","title":"Validate the is_paf parameter — validate_is_paf","text":"function validates is_paf argument valid","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_is_paf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the is_paf parameter — validate_is_paf","text":"","code":"validate_is_paf(is_paf)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_is_paf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the is_paf parameter — validate_is_paf","text":"`is_paf` boolean determining pif estimation actually paf","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_is_paf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the is_paf parameter — validate_is_paf","text":"boolean indicating whether paf pif","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_n_boostrap_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate n_bootstrap_samples — validate_n_boostrap_samples","title":"Validate n_bootstrap_samples — validate_n_boostrap_samples","text":"Internal function validate number bootstrap samples","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_n_boostrap_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate n_bootstrap_samples — validate_n_boostrap_samples","text":"","code":"validate_n_boostrap_samples(n_bootstrap_samples)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_n_boostrap_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate n_bootstrap_samples — validate_n_boostrap_samples","text":"n_bootstrap_samples number samples boostrap","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_n_boostrap_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate n_bootstrap_samples — validate_n_boostrap_samples","text":"valid n_bootstrap_samples (integer)","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_number_of_cores.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate number of cores — validate_number_of_cores","title":"Validate number of cores — validate_number_of_cores","text":"Internal function validate number cores variable model","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_number_of_cores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate number of cores — validate_number_of_cores","text":"","code":"validate_number_of_cores(num_cores)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_number_of_cores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate number of cores — validate_number_of_cores","text":"num_cores (int) Number cores; defaults parallel::detectCores().","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_number_of_cores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate number of cores — validate_number_of_cores","text":"integer number cores use.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_parallel_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate parallel setup — validate_parallel_setup","title":"Validate parallel setup — validate_parallel_setup","text":"Internal function validate parallelization return adecuate %% operator foreach.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_parallel_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate parallel setup — validate_parallel_setup","text":"","code":"validate_parallel_setup(parallel, num_cores)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_parallel_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate parallel setup — validate_parallel_setup","text":"parallel Boolean indicating whether run argument parallel num_cores Number cores run parallelization ","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_parallel_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate parallel setup — validate_parallel_setup","text":"function parallelize foreach::foreach() either %% %dopar%.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_return_replicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the return_replicates parameter — validate_return_replicates","title":"Validate the return_replicates parameter — validate_return_replicates","text":"function validates return_replicates argument valid","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_return_replicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the return_replicates parameter — validate_return_replicates","text":"","code":"validate_return_replicates(return_replicates)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_return_replicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the return_replicates parameter — validate_return_replicates","text":"`return_replicates` boolean determining pif estimation actually paf","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_return_replicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the return_replicates parameter — validate_return_replicates","text":"boolean indicating whether return replicate simulations ","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_survey_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate design — validate_survey_design","title":"Validate design — validate_survey_design","text":"Internal function validate design whether svyrep.design survey.design.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_survey_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate design — validate_survey_design","text":"","code":"validate_survey_design(design, n_bootstrap_samples, ...)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_survey_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate design — validate_survey_design","text":"design svyrep.design, survey.design survey.design2 object.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_survey_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate design — validate_survey_design","text":"svyrep.design. design already svyrep.design returns design. Else returns bootstrap svyrep.design many n_bootstrap_samples","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_arguments.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the theta_distribution function — validate_theta_arguments","title":"Validate the theta_distribution function — validate_theta_arguments","text":"function validates theta_distribution indeed function one arguments n.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_arguments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the theta_distribution function — validate_theta_arguments","text":"","code":"validate_theta_arguments(theta_distribution, additional_theta_arguments, theta)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_arguments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the theta_distribution function — validate_theta_arguments","text":"`theta_distribution` random number simulator theta `additional_theta_arguments` list additional arguments use theta_distribution","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_arguments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the theta_distribution function — validate_theta_arguments","text":"random number generating function simulate theta .","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the theta_distribution function — validate_theta_distribution","title":"Validate the theta_distribution function — validate_theta_distribution","text":"function validates theta_distribution indeed function one arguments n.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the theta_distribution function — validate_theta_distribution","text":"","code":"validate_theta_distribution(theta_distribution, additional_theta_arguments)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the theta_distribution function — validate_theta_distribution","text":"`theta_distribution` random number simulator theta `additional_theta_arguments` list additional arguments use theta_distribution","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the theta_distribution function — validate_theta_distribution","text":"random number generating function simulate theta .","code":""}]
