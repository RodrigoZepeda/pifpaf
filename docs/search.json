[{"path":"https://rodrigozepeda.github.io/pifpaf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 pifpaf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/articles/Epidemiology-101.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Epidemiology 101: The attributable and impact fractions","text":"quick introduction Population Attributable Fractions Potential Impact Fractions comparative risk assessment perspective.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/articles/Epidemiology-101.html","id":"the-population-attributable-fraction","dir":"Articles","previous_headings":"","what":"The Population Attributable Fraction","title":"Epidemiology 101: The attributable and impact fractions","text":"Population Attributable Fraction (PAF) quantifies proportion disease (mortality) cases attributable exposure certain risk factor. PAF estimated constructing counterfactual scenario exposure risk factor Theoretical Minimum Risk Exposure Level (TMREL). level \\(0\\) exposure (e.g. lead cigarette smoke), ideal exposure level (e.g. sodium intake 2000 systolic blood pressure 120mmHg). example, consider population 100 individuals consuming different amount cigarretes per day given following image:","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/articles/Epidemiology-101.html","id":"the-potential-impact-fraction","dir":"Articles","previous_headings":"","what":"The Potential Impact Fraction","title":"Epidemiology 101: The attributable and impact fractions","text":"Potential Impact Fraction (PIF) represents generalization PAF. quantifies proportion disease (mortality) cases attributable change exposure certain risk factor. PAF particular case PIF change exposure reduction theoretical minimum risk level. However, levels exposure possible. example: intervention reduces population’s body mass index (BMI) 1 unit. ban smoking public spaces exposure second-hand cigarrete smoke halfed. Changing diet individuals","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/articles/Epidemiology-101.html","id":"the-purpose-of-the-pifpaf-package","dir":"Articles","previous_headings":"","what":"The purpose of the pifpaf package","title":"Epidemiology 101: The attributable and impact fractions","text":"pifpaf package allows users estimate population attributable fraction, pif, potential impact fraction, paf, cross-sectional studies come survey design using bootstrap algorithms Heeringa et al. (2015). two main scenarios use package: using individual-level data survey determine exposure independent source determine relative risk associated exposure (say metanalysis). case one use pif() paf(). using aggregated data survey determine exposure independent source determine relative risk associated exposure (say metanalysis). case one use pif_approximate() paf_approximate().","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/articles/Epidemiology-101.html","id":"other-r-packages","dir":"Articles","previous_headings":"","what":"Other R packages","title":"Epidemiology 101: The attributable and impact fractions","text":"graphPAF Allows estimation population attributable fractions. Can use data cross sectional, case-control, cohort studies. can also estimate multiple risk factors time. Doesn’t allow estimation potential impact fractions. AF Dahlqwist et al. (2016) allows user utilize cross sectional, case-control, cohort studies binary exposures. causalPAF allows estimation population attributable fractions given causal diagram. pifpaf homonymous package using methods approximate. However, doesn’t allow survey data changes relative risk function.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rodrigo Zepeda-Tello. Author, maintainer. Dalia Camacho-García-Formentí. Author. Tonatiuh Barrientos-Gutiérrez. Contributor. Ana Basto-Abreu. Contributor. Ariela Braverman-Bronstein. Contributor. Dèsirée Vidaña-Pérez. Contributor. Frederick Cudhea. Contributor.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zepeda-Tello R, Camacho-García-Formentí D (2023). pifpaf: Potential Impact Fraction Population Attributable Fraction Cross-Sectional Data. R package version 2.0.0, https://rodrigozepeda.github.io/pifpaf/.","code":"@Manual{,   title = {pifpaf: Potential Impact Fraction and Population Attributable Fraction for Cross-Sectional Data},   author = {Rodrigo Zepeda-Tello and Dalia Camacho-García-Formentí},   year = {2023},   note = {R package version 2.0.0},   url = {https://rodrigozepeda.github.io/pifpaf/}, }"},{"path":"https://rodrigozepeda.github.io/pifpaf/index.html","id":"pifpaf-potential-impact-fraction-and-population-attributable-fraction-estimation-","dir":"","previous_headings":"","what":"pifpaf package","title":"pifpaf package","text":"STILL WORK PROCESS pifpaf package corresponds update previous homonimous package developed INSP.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"pifpaf package","text":"can install development version pifpaf GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"RodrigoZepeda/pifpaf\")"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/as.data.frame.pif_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform to data.frame — as.data.frame.pif_sim","title":"Transform to data.frame — as.data.frame.pif_sim","text":"Method transforming potential impact fraction population attributable fraction data.frame","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/as.data.frame.pif_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform to data.frame — as.data.frame.pif_sim","text":"","code":"# S3 method for pif_sim as.data.frame(x, ...)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/as.data.frame.pif_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform to data.frame — as.data.frame.pif_sim","text":"x pif_sim object ... Additional methods pass summary.pif_sim()","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/as.data.frame.pif_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform to data.frame — as.data.frame.pif_sim","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) as.data.frame(pifsim) #>     counterfactual   relative_risk potential_impact_fraction #> 1 Counterfactual_1 Relative_Risk_1                0.01758415 #> 2 Counterfactual_1 Relative_Risk_1               -0.01391198 #> 3 Counterfactual_1 Relative_Risk_1                0.04908027 #>   average_relative_risk average_counterfactual           type #> 1              13318.50               12775.15 point_estimate #> 2             -80205.34              -76922.86     Lower 2.5% #> 3             106842.34              102473.16    Upper 97.5%"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/coef.pif_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract point estimate of potential impact fraction or population attributable fraction — coef.pif_sim","title":"Extract point estimate of potential impact fraction or population attributable fraction — coef.pif_sim","text":"Method obtaining point estimate pif_sim object (.e. point-estimate potential impact fraction population attributable fraction via bootstrap).","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/coef.pif_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract point estimate of potential impact fraction or population attributable fraction — coef.pif_sim","text":"","code":"# S3 method for pif_sim coef(x, ...)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/coef.pif_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract point estimate of potential impact fraction or population attributable fraction — coef.pif_sim","text":"x pif_sim object ... additional arguments base::mean()","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/coef.pif_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract point estimate of potential impact fraction or population attributable fraction — coef.pif_sim","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) coef(pifsim) #>     counterfactual   relative_risk potential_impact_fraction #> 1 Counterfactual_1 Relative_Risk_1                0.01408666 #>   average_relative_risk average_counterfactual #> 1              63568009               62349641"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/confint.pif_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract confidence intervals for the potential impact fraction or the\npopulation attributable fraction — confint.pif_sim","title":"Extract confidence intervals for the potential impact fraction or the\npopulation attributable fraction — confint.pif_sim","text":"Method obtaining confidence intervals pif_sim object","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/confint.pif_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract confidence intervals for the potential impact fraction or the\npopulation attributable fraction — confint.pif_sim","text":"","code":"# S3 method for pif_sim confint(x, parm = NULL, level = 0.95, method = c(\"wald\", \"percentile\"), ...)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/confint.pif_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract confidence intervals for the potential impact fraction or the\npopulation attributable fraction — confint.pif_sim","text":"x pif_sim object parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level (double) Confidence level uncertainty interval. Defaults 0.95. method (string) either 'wald' (recommended) 'percentile' uncertainty intervals based upon bootstrap's percentile Wald-type approximation (see confidence interval section) ... additional methods pass mean() stats::sd() wald stats::quantile() percentile type intervals","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/confint.pif_sim.html","id":"confidence-intervals","dir":"Reference","previous_headings":"","what":"Confidence Intervals","title":"Extract confidence intervals for the potential impact fraction or the\npopulation attributable fraction — confint.pif_sim","text":"Confidence intervals estimated via two methods specified Arnab (2017) . Wald-type confidence intervals (precise) form: \\[ \\widehat{\\text{PIF}} \\pm t_{1 - \\alpha/2} \\sqrt{\\widehat{\\text{Var}}_{\\text{B}}\\big[\\widehat{\\text{PIF}}\\big]} \\] \\(t_{1 - \\alpha/2}\\) stands percent points level \\(1 - \\alpha/2\\) Student's t-distribution, \\(\\widehat{\\text{Var}}_{\\text{B}}\\big[\\widehat{\\text{PIF}}\\big]\\) represents estimated variance (via bootstrap) potential impact fraction estimator. Percentile confidence intervals (less precise) form: \\[ \\Big[\\widehat{\\text{PIF}}_{\\text{B},\\alpha/2}, \\widehat{\\text{PIF}}_{\\text{B},1-\\alpha/2}\\Big] \\] \\(\\widehat{\\text{PIF}}_{\\text{B},k}\\) represents kth sample quantile bootstrap simulation potential impact fraction estimator.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/confint.pif_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract confidence intervals for the potential impact fraction or the\npopulation attributable fraction — confint.pif_sim","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) confint(pifsim) #>     counterfactual   relative_risk potential_impact_fraction #> 1 Counterfactual_1 Relative_Risk_1              -0.001083471 #> 2 Counterfactual_1 Relative_Risk_1               0.036626621 #>   average_relative_risk average_counterfactual        type #> 1             -13524.97              -13498.26  Lower 2.5% #> 2              18641.67               18588.75 Upper 97.5%"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/ensanut.html","id":null,"dir":"Reference","previous_headings":"","what":"ENSANUT 2018 — ensanut","title":"ENSANUT 2018 — ensanut","text":"Data Mexican National Health Nutrition Survey 2018 (ENSANUT-2018).","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/ensanut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ENSANUT 2018 — ensanut","text":"","code":"ensanut"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/ensanut.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ENSANUT 2018 — ensanut","text":"Information contains: tibble containing following information age Age individual (years). sex Sex individual (Male Female). weight Survey weights associated survey. strata Strata survey. hypertension individual hypertension TRUE, FALSE otherwise. delta_na_phase_1 Proposed change sodium consumption (counterfactual). systolic_blood_pressure Mean systolic blood pressure individual registered survey. age_group Age group individual","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/ensanut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ENSANUT 2018 — ensanut","text":"","code":"ensanut #> # A tibble: 1,333 × 8 #>      age sex     weight strata hypertension delta_na_phase_1 #>    <dbl> <chr>    <dbl>  <dbl> <lgl>                   <dbl> #>  1    28 Female  32134.    222 FALSE                    5.90 #>  2    24 Female  75955.    222 FALSE                   19.1  #>  3    45 Female  16076.    222 FALSE                   49.5  #>  4    39 Male    83463.    222 FALSE                    6.27 #>  5    41 Male    84735.    223 FALSE                    0    #>  6    61 Male   118741.    223 FALSE                    0    #>  7    46 Female  44085.    223 FALSE                   40.0  #>  8    48 Female  73051.    223 FALSE                   79.4  #>  9    23 Female  26276.    122 FALSE                   26.2  #> 10    69 Female  52114.    122 FALSE                    8.69 #> # ℹ 1,323 more rows #> # ℹ 2 more variables: systolic_blood_pressure <dbl>, age_group <fct> # Create a survey design as follows: options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/get_bootstrap_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get bootstrap simulations from pif and paf — get_bootstrap_simulations","title":"Get bootstrap simulations from pif and paf — get_bootstrap_simulations","text":"Returns bootstrap simulations pif paf","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/get_bootstrap_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get bootstrap simulations from pif and paf — get_bootstrap_simulations","text":"","code":"get_bootstrap_simulations(object)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/get_bootstrap_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get bootstrap simulations from pif and paf — get_bootstrap_simulations","text":"object pif_sim object","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/get_bootstrap_simulations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get bootstrap simulations from pif and paf — get_bootstrap_simulations","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) get_bootstrap_simulations(pifsim) #>           potential_impact_fraction average_relative_risk #> result.1                0.007216062            2.35501297 #> result.2                0.023713985            0.02384105 #> result.3                0.012833224            0.44442882 #> result.4                0.003901976            1.81765733 #> result.5                0.016474301            0.05780710 #> result.6                0.020792914          680.58305420 #> result.7               -0.002861058           18.07672909 #> result.8                0.024220577            0.15333762 #> result.9                0.022724877            0.00249384 #> result.10               0.010581668            0.03631547 #>           average_counterfactual   counterfactual   relative_risk #> result.1            2.338019e+00 Counterfactual_1 Relative_Risk_1 #> result.2            2.327569e-02 Counterfactual_1 Relative_Risk_1 #> result.3            4.387254e-01 Counterfactual_1 Relative_Risk_1 #> result.4            1.810565e+00 Counterfactual_1 Relative_Risk_1 #> result.5            5.685477e-02 Counterfactual_1 Relative_Risk_1 #> result.6            6.664317e+02 Counterfactual_1 Relative_Risk_1 #> result.7            1.812845e+01 Counterfactual_1 Relative_Risk_1 #> result.8            1.496237e-01 Counterfactual_1 Relative_Risk_1 #> result.9            2.437168e-03 Counterfactual_1 Relative_Risk_1 #> result.10           3.593119e-02 Counterfactual_1 Relative_Risk_1"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/get_fraction_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get whether object is population attributable fraction or potential impact fraction — get_fraction_type","title":"Get whether object is population attributable fraction or potential impact fraction — get_fraction_type","text":"Returns whether pif_sim object specified creator population attributable fraction potential impact fraction","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/get_fraction_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get whether object is population attributable fraction or potential impact fraction — get_fraction_type","text":"","code":"get_fraction_type(object)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/get_fraction_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get whether object is population attributable fraction or potential impact fraction — get_fraction_type","text":"object pif_sim object","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/get_fraction_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get whether object is population attributable fraction or potential impact fraction — get_fraction_type","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) get_fraction_type(pifsim) #> [1] \"Potential Impact Fraction (PIF)\""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/get_theta_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get bootstrap simulations for theta — get_theta_simulations","title":"Get bootstrap simulations for theta — get_theta_simulations","text":"Returns bootstrap simulations parameter theta pif paf","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/get_theta_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get bootstrap simulations for theta — get_theta_simulations","text":"","code":"get_theta_simulations(object)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/get_theta_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get bootstrap simulations for theta — get_theta_simulations","text":"object pif_sim object","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/get_theta_simulations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get bootstrap simulations for theta — get_theta_simulations","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) get_theta_simulations(pifsim) #>              [,1]        [,2] #>  [1,]  0.06004010  0.22371445 #>  [2,]  0.09351877  0.61699948 #>  [3,]  0.10162279  0.23116740 #>  [4,]  0.20740711  0.39920556 #>  [5,]  0.23337643  0.54691803 #>  [6,]  0.11582132  0.19945690 #>  [7,]  0.15277948  0.55768320 #>  [8,]  0.06835512  0.18431940 #>  [9,] -0.14176025 -0.03421969 #> [10,]  0.04009266  0.59905450"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/internal_pif_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Pif from dataframe — internal_pif_data_frame","title":"Pif from dataframe — internal_pif_data_frame","text":"Pif dataframe","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/internal_pif_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pif from dataframe — internal_pif_data_frame","text":"","code":"internal_pif_data_frame(df, theta, rr, cft, weights = NULL, is_paf = FALSE)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/internal_pif_data_frame.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pif from dataframe — internal_pif_data_frame","text":"previous version package function called pif.empirical.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/mean.pif_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract mean of bootstrap simulations of potential impact fraction or population\nattributable fraction — mean.pif_sim","title":"Extract mean of bootstrap simulations of potential impact fraction or population\nattributable fraction — mean.pif_sim","text":"Method obtaining arithmetic mean bootstrap simulations pif_sim object (.e. point-estimate potential impact fraction population attributable fraction via bootstrap).","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/mean.pif_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract mean of bootstrap simulations of potential impact fraction or population\nattributable fraction — mean.pif_sim","text":"","code":"# S3 method for pif_sim mean(x, ...)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/mean.pif_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract mean of bootstrap simulations of potential impact fraction or population\nattributable fraction — mean.pif_sim","text":"x pif_sim object ... additional arguments pass base::mean()","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/mean.pif_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract mean of bootstrap simulations of potential impact fraction or population\nattributable fraction — mean.pif_sim","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) mean(pifsim) #>     counterfactual   relative_risk potential_impact_fraction #> 1 Counterfactual_1 Relative_Risk_1                0.01881426 #>   average_relative_risk average_counterfactual #> 1              372.1594               359.7801"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/n_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract number of bootstrap simulations — n_bootstrap","title":"Extract number of bootstrap simulations — n_bootstrap","text":"Method obtaining number bootstrap simulations used construct pif_sim object.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/n_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract number of bootstrap simulations — n_bootstrap","text":"","code":"n_bootstrap(x)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/n_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract number of bootstrap simulations — n_bootstrap","text":"x pif_sim object","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/n_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract number of bootstrap simulations — n_bootstrap","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) n_bootstrap(pifsim) #> [1] 10"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":null,"dir":"Reference","previous_headings":"","what":"Population Attributable Fraction — paf","title":"Population Attributable Fraction — paf","text":"Estimates population attributable fraction, paf, individual-level exposure data (covariates), X, cross-sectional survey. Exposure assumed associated relative risk function, rr, parameter theta. counterfactual scenario function exposure cft assumed. population attributable fraction defined Chan et al. (2023)  :   \\[  \\text{PAF} = \\dfrac{\\mathbb{E}\\Big[RR(X;\\theta)\\Big] - 1}{\\mathbb{E}\\Big[RR(X;\\theta)\\Big]} \\] : \\(X\\) denotes individual-level matrix exposure covariates, \\(\\theta\\) represents additional parameters relative risk function, \\(RR(X,\\theta)\\) denotes relative risk exposure (covariates) level \\(X\\) given parameters \\(\\theta\\), \\({\\mathbb{E}\\Big[RR(X;\\theta)\\Big]}\\) represents average relative risk population \\(1\\) represents relative risk theoretical minimum risk scenario, \\(\\text{PAF}\\) represents population attributable fraction","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population Attributable Fraction — paf","text":"","code":"paf(   design,   theta,   rr,   additional_theta_arguments,   n_bootstrap_samples = NULL,   theta_distribution = \"default\",   parallel = TRUE,   num_cores = 1,   weights = NULL,   ... )"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Population Attributable Fraction — paf","text":"design (survey.design, data.frame,tibble, svyrep.design) survey data structure. data comes survey set design survey::svydesign(). can also support survey::svrepdesign() design survey comes replicates. Finally, model can also accommodate data.frame tibble weights assuming simple random sampling without replacement. theta (vector/double) parameters relative risk function rr. rr (function/list) relative risk function two parameters: data.frame called X containing individual-level exposure covariates, theta (order). can also list several relative risk functions apply function different modelling scenario. additional_theta_arguments additional information theta utilized obtaining bootstrap samples paramter. Options : (double) variance theta theta one dimensional asymptotical normality assumed (default). (vector) variances entry theta theta n-dimensional entries uncorrelated asymptotical normality assumed (default). (matrix) variance-covariance matrix theta theta n-dimensional entries correlated asymptotical normality assumed (default). list arguments pass via base::.call() theta_distribution simulate samples theta theta assumed asymptotically normally distributed. Optional n_bootstrap_samples (double) number bootstrap samples. svyrep.design passed argument, n_bootstrap_samples represents number number replicates design. theta_distribution (function) random number generator follows distribution estimator theta. default, theta assumed asymptotically normal thus theta_distribution set mvtnorm::rmvnorm() variance given additional_theta_arguments. number simulations theta_distribution function must parametrized parameter name n. parallel (boolean) Flag indicating whether computations parallel. Default TRUE. num_cores (int) Number cores; defaults parallel::detectCores(). weights (vector) following recommended version use svydesign object design can still use weights associate weights estimation. Beware might give accurate estimations variance uncertainty intervals. ... Additional parameters svrep::as_bootstrap_design().","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":"confidence-intervals","dir":"Reference","previous_headings":"","what":"Confidence Intervals","title":"Population Attributable Fraction — paf","text":"Confidence intervals estimated via two methods specified Arnab (2017) . Wald-type confidence intervals (precise) form: \\[ \\widehat{\\text{PAF}} \\pm t_{1 - \\alpha/2} \\sqrt{\\widehat{\\text{Var}}_{\\text{B}}\\big[\\widehat{\\text{PIF}}\\big]} \\] \\(t_{1 - \\alpha/2}\\) stands percent points level \\(1 - \\alpha/2\\) Student's t-distribution, \\(\\widehat{\\text{Var}}_{\\text{B}}\\big[\\widehat{\\text{PIF}}\\big]\\) represents estimated variance (via bootstrap) potential impact fraction estimator. Percentile confidence intervals (less precise) form: \\[ \\Big[\\widehat{\\text{PAF}}_{\\text{B},\\alpha/2}, \\widehat{\\text{PAF}}_{\\text{B},1-\\alpha/2}\\Big] \\] \\(\\widehat{\\text{PAF}}_{\\text{B},k}\\) represents kth sample quantile bootstrap simulation potential impact fraction estimator.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":"additional-parallelization-options","dir":"Reference","previous_headings":"","what":"Additional parallelization options","title":"Population Attributable Fraction — paf","text":"default function uses foreach::foreach parallelize creating cluster via doParallel::registerDoParallel. finner parallelization control can :","code":"#Create the cluster outside using whatever you want myCluster <- parallel::makeCluster(3, type = \"PSOCK\")  #Register the cluster doParallel::registerDoParallel(myCluster)  #Call the function using parallel = TRUE to use %dopar% and num_cores = NULL to avoid setting paf(..., parallel = TRUE, num_cores = NULL)  #Stop the cluster doParallel::stopCluster(myCluster)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Population Attributable Fraction — paf","text":"Arnab R (2017). “Survey sampling theory applications.” chapter Variance Estimation: Complex Survey Designs. Academic Press. Chan CE, Zepeda-Tello R, Camacho-García-Formentí D, Cudhea F, Meza R, Rodrigues E, Spiegelman D, Barrientos-Gutierrez T, Zhou X (2023). “Nonparametric Estimation Potential Impact Fraction Population Attributable Fraction Individual-Level Aggregated Data.” 2207.03597.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Population Attributable Fraction — paf","text":"","code":"# Use the ensanut dataset data(ensanut)  # EXAMPLE 1 # Setup the survey design options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } paf(design,   theta = log(c(1.05, 1.38)), rr,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) #> ── Population Attributable Fraction (PAF) ────────────────────────────────────── #>   population_attributable_fraction           type average_relative_risk #> 1                        0.2447751 point_estimate              18039863 #> 2                       -3.2920090     Lower 2.5%            -107919525 #> 3                        3.7815592    Upper 97.5%             143999251 #>   average_counterfactual   relative_risk                 counterfactual #> 1                      1 Relative_Risk_1 Theoretical_minimum_risk_level #> 2                      1 Relative_Risk_1 Theoretical_minimum_risk_level #> 3                      1 Relative_Risk_1 Theoretical_minimum_risk_level #> ──────────────────────────────────────────────────────────────────────────────── #> • Number of bootstrap simulations: 10 #> ✖ A low number of bootstrap simulations will result in an unstable estimate. #> • Use `as.data.frame` to access values. #> • Use `summary` to save list of main results.  # EXAMPLE 2 # Now do the same but using a replicate design options(survey.lonely.psu = \"adjust\") rep_design <- svrep::as_bootstrap_design(design, replicates = 10) paf(rep_design,   theta = log(c(1.05, 1.38)), rr,   additional_theta_arguments = c(0.01, 0.03) ) #> ── Population Attributable Fraction (PAF) ────────────────────────────────────── #>   population_attributable_fraction           type average_relative_risk #> 1                         -7.06308 point_estimate              47003.54 #> 2                        -53.79660     Lower 2.5%            -283313.88 #> 3                         39.67044    Upper 97.5%             377320.97 #>   average_counterfactual   relative_risk                 counterfactual #> 1                      1 Relative_Risk_1 Theoretical_minimum_risk_level #> 2                      1 Relative_Risk_1 Theoretical_minimum_risk_level #> 3                      1 Relative_Risk_1 Theoretical_minimum_risk_level #> ──────────────────────────────────────────────────────────────────────────────── #> • Number of bootstrap simulations: 10 #> ✖ A low number of bootstrap simulations will result in an unstable estimate. #> • Use `as.data.frame` to access values. #> • Use `summary` to save list of main results."},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":null,"dir":"Reference","previous_headings":"","what":"Potential Impact Fraction — pif","title":"Potential Impact Fraction — pif","text":"Estimates potential impact fraction, pif, individual-level exposure data (covariates), X, cross-sectional survey. Exposure assumed associated relative risk function, rr, parameter theta. counterfactual scenario function exposure cft assumed. potential impact fraction defined Chan et al. (2023) :   \\[  \\text{PIF} = \\dfrac{\\mathbb{E}\\Big[RR(X;\\theta)\\Big] -    \\mathbb{E}\\Big[RR\\big(\\text{cft}(X);\\theta\\big)\\Big]}{\\mathbb{E}\\Big[RR(X;\\theta)\\Big]} \\] : \\(X\\) denotes individual-level matrix exposure covariates, \\(\\theta\\) represents additional parameters relative risk function, \\(RR(X,\\theta)\\) denotes relative risk exposure (covariates) level \\(X\\) given parameters \\(\\theta\\), \\(cft(X)\\) denotes counterfactual function applied exposure covariates, \\({\\mathbb{E}\\Big[RR(X;\\theta)\\Big]}\\) \\({\\mathbb{E}\\Big[RR(\\text{cft}(X);\\theta)\\Big]}\\) denote population average relative risk current (observed) conditions relative risk counterfactual scenario. \\(\\text{PIF}\\) represents potential impact fraction.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Potential Impact Fraction — pif","text":"","code":"pif(   design,   theta,   rr,   cft = NULL,   additional_theta_arguments,   n_bootstrap_samples = NULL,   theta_distribution = \"default\",   parallel = TRUE,   num_cores = 1,   is_paf = FALSE,   weights = NULL,   ... )"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Potential Impact Fraction — pif","text":"design (survey.design, data.frame,tibble, svyrep.design) survey data structure. data comes survey set design survey::svydesign(). can also support survey::svrepdesign() design survey comes replicates. Finally, model can also accommodate data.frame tibble weights assuming simple random sampling without replacement. theta (vector/double) parameters relative risk function rr. rr (function/list) relative risk function two parameters: data.frame called X containing individual-level exposure covariates, theta (order). can also list several relative risk functions apply function different modelling scenario. cft (function/list) counterfactual function takes data.frame, X, individual-level exposure covariates returns new data.frame individual-level counterfactual exposure covariates. can also list several counterfactual functions apply function different modelling scenario. additional_theta_arguments additional information theta utilized obtaining bootstrap samples paramter. Options : (double) variance theta theta one dimensional asymptotical normality assumed (default). (vector) variances entry theta theta n-dimensional entries uncorrelated asymptotical normality assumed (default). (matrix) variance-covariance matrix theta theta n-dimensional entries correlated asymptotical normality assumed (default). list arguments pass via base::.call() theta_distribution simulate samples theta theta assumed asymptotically normally distributed. Optional n_bootstrap_samples (double) number bootstrap samples. svyrep.design passed argument, n_bootstrap_samples represents number number replicates design. theta_distribution (function) random number generator follows distribution estimator theta. default, theta assumed asymptotically normal thus theta_distribution set mvtnorm::rmvnorm() variance given additional_theta_arguments. number simulations theta_distribution function must parametrized parameter name n. parallel (boolean) Flag indicating whether computations parallel. Default TRUE. num_cores (int) Number cores; defaults parallel::detectCores(). is_paf (boolean) Whether function estimated Population Attributable Fraction (is_paf = TRUE) Potential Impact Fraction (is_paf = FALSE) weights (vector) following recommended version use svydesign object design can still use weights associate weights estimation. Beware might give accurate estimations variance uncertainty intervals. ... Additional parameters svrep::as_bootstrap_design().","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"additional-parallelization-options","dir":"Reference","previous_headings":"","what":"Additional parallelization options","title":"Potential Impact Fraction — pif","text":"default function uses foreach::foreach parallelize creating cluster via doParallel::registerDoParallel. finner parallelization control can :","code":"#Create the cluster outside using whatever you want myCluster <- parallel::makeCluster(3, type = \"PSOCK\")  #Register the cluster doParallel::registerDoParallel(myCluster)  #Call the function using parallel = TRUE to use %dopar% and num_cores = NULL to avoid setting pif(..., parallel = TRUE, num_cores = NULL)  #Stop the cluster doParallel::stopCluster(myCluster)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Potential Impact Fraction — pif","text":"Chan CE, Zepeda-Tello R, Camacho-García-Formentí D, Cudhea F, Meza R, Rodrigues E, Spiegelman D, Barrientos-Gutierrez T, Zhou X (2023). “Nonparametric Estimation Potential Impact Fraction Population Attributable Fraction Individual-Level Aggregated Data.” 2207.03597.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Potential Impact Fraction — pif","text":"","code":"# Use the ensanut dataset data(ensanut)  # EXAMPLE 1 # Setup the survey design options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) #> ── Potential Impact Fraction (PIF) ───────────────────────────────────────────── #>   potential_impact_fraction           type average_relative_risk #> 1               0.015077583 point_estimate              27099210 #> 2              -0.006032284     Lower 2.5%            -163798459 #> 3               0.036187450    Upper 97.5%             217996879 #>   average_counterfactual   relative_risk   counterfactual #> 1               26664053 Relative_Risk_1 Counterfactual_1 #> 2             -161168532 Relative_Risk_1 Counterfactual_1 #> 3              214496639 Relative_Risk_1 Counterfactual_1 #> ──────────────────────────────────────────────────────────────────────────────── #> • Number of bootstrap simulations: 10 #> ✖ A low number of bootstrap simulations will result in an unstable estimate. #> • Use `as.data.frame` to access values. #> • Use `summary` to save list of main results.  # EXAMPLE 2 # Now do the same but using a replicate design rep_design <- svrep::as_bootstrap_design(design, replicates = 10) pif(rep_design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03) ) #> ── Potential Impact Fraction (PIF) ───────────────────────────────────────────── #>   potential_impact_fraction           type average_relative_risk #> 1               0.019954628 point_estimate              34239666 #> 2              -0.003237733     Lower 2.5%            -207009331 #> 3               0.043146989    Upper 97.5%             275488663 #>   average_counterfactual   relative_risk   counterfactual #> 1               33627417 Relative_Risk_1 Counterfactual_1 #> 2             -203307730 Relative_Risk_1 Counterfactual_1 #> 3              270562564 Relative_Risk_1 Counterfactual_1 #> ──────────────────────────────────────────────────────────────────────────────── #> • Number of bootstrap simulations: 10 #> ✖ A low number of bootstrap simulations will result in an unstable estimate. #> • Use `as.data.frame` to access values. #> • Use `summary` to save list of main results.  # EXAMPLE 3 # Calculate two different relative risks rr <- list(  function(X, theta) {exp(theta[1] * X[, \"systolic_blood_pressure\"] / 100)},  function(X, theta) {exp(theta[2] * X[, \"systolic_blood_pressure\"] / 100 + theta[3]* X[,\"age\"])} )  # Calculate three counterfactual scenarios of SBP reduction from 1 to 3 mmhg cft <- list( function(X){X[, \"systolic_blood_pressure\"]  <- X[, \"systolic_blood_pressure\"]  - 1; return(X)}, function(X){X[, \"systolic_blood_pressure\"]  <- X[, \"systolic_blood_pressure\"]  - 2; return(X)}, function(X){X[, \"systolic_blood_pressure\"]  <- X[, \"systolic_blood_pressure\"]  - 3; return(X)} )  pif(rep_design,   theta = log(c(1.05, 1.38, 1.21)), rr, cft,   additional_theta_arguments = c(0.01, 0.03, 0.025) ) #> ── Potential Impact Fraction (PIF) ───────────────────────────────────────────── #>    potential_impact_fraction           type average_relative_risk #> 1               0.0002052009 point_estimate          1.029323e+00 #> 2               0.0005116048 point_estimate          1.029323e+00 #> 3               0.0042196581 point_estimate          1.219894e+18 #> 4               0.0105062955 point_estimate          1.219894e+18 #> 5              -0.0016980777     Lower 2.5%          7.966294e-01 #> 6               0.0021084794    Upper 97.5%          1.262017e+00 #> 7              -0.0042155060     Lower 2.5%          8.028357e-01 #> 8               0.0052387155    Upper 97.5%          1.255811e+00 #> 9              -0.0002673034     Lower 2.5%         -7.066745e+18 #> 10              0.0087066196    Upper 97.5%          9.506534e+18 #> 11             -0.0015352236     Lower 2.5%         -6.845729e+18 #> 12              0.0225478146    Upper 97.5%          9.285517e+18 #>    average_counterfactual   relative_risk   counterfactual #> 1            1.029032e+00 Relative_Risk_1 Counterfactual_1 #> 2            1.028596e+00 Relative_Risk_1             <NA> #> 3            1.216930e+18 Relative_Risk_2 Counterfactual_1 #> 4            1.212498e+18 Relative_Risk_2             <NA> #> 5            7.983482e-01 Relative_Risk_1 Counterfactual_1 #> 6            1.259715e+00 Relative_Risk_1 Counterfactual_1 #> 7            8.069958e-01 Relative_Risk_1             <NA> #> 8            1.250196e+00 Relative_Risk_1             <NA> #> 9           -7.049196e+18 Relative_Risk_2 Counterfactual_1 #> 10           9.483056e+18 Relative_Risk_2 Counterfactual_1 #> 11          -6.803314e+18 Relative_Risk_2             <NA> #> 12           9.228310e+18 Relative_Risk_2             <NA> #> ──────────────────────────────────────────────────────────────────────────────── #> • Number of bootstrap simulations: 60 #> ✖ A low number of bootstrap simulations will result in an unstable estimate. #> • Use `as.data.frame` to access values. #> • Use `summary` to save list of main results."},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Pif from dataframe — pif_data_frame","title":"Pif from dataframe — pif_data_frame","text":"Pif dataframe","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pif from dataframe — pif_data_frame","text":"","code":"pif_data_frame(df, theta, rr, cft, weights = NULL, is_paf = FALSE)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_data_frame.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pif from dataframe — pif_data_frame","text":"previous version package function called pif.empirical.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"pif_sim class — pif_sim","title":"pif_sim class — pif_sim","text":"S7::S7_class() saving bootstrap simulations potential impact fraction pif() population attributable fraction paf().","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pif_sim class — pif_sim","text":"","code":"pif_sim(   is_paf = class_missing,   bootstrap_design = class_missing,   theta_simulations = class_missing,   pif_simulations = class_missing )"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pif_sim class — pif_sim","text":"is_paf (boolean) Whether function estimated Population Attributable Fraction (is_paf = TRUE) Potential Impact Fraction (is_paf = FALSE) bootstrap_design survey bootstrap design utilized estimating pif paf. theta_simulations Simulations parameter theta relative risk. pif_simulations Bootstrap simulations impact fraction attributable fraction.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_sim.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"pif_sim class — pif_sim","text":"use class development .","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"Estimates potential impact fraction, pif, individual-level exposure data (covariates), X, cross-sectional survey. Exposure assumed associated relative risk function, rr, parameter theta. counterfactual scenario function exposure cft assumed. potential impact fraction defined Chan et al. (2023) :   \\[  \\text{PIF} = \\dfrac{\\mathbb{E}\\Big[RR(X;\\theta)\\Big] -    \\mathbb{E}\\Big[RR\\big(\\text{cft}(X);\\theta\\big)\\Big]}{\\mathbb{E}\\Big[RR(X;\\theta)\\Big]} \\] : \\(X\\) denotes individual-level matrix exposure covariates, \\(\\theta\\) represents additional parameters relative risk function, \\(RR(X,\\theta)\\) denotes relative risk exposure (covariates) level \\(X\\) given parameters \\(\\theta\\), \\(cft(X)\\) denotes counterfactual function applied exposure covariates, \\({\\mathbb{E}\\Big[RR(X;\\theta)\\Big]}\\) \\({\\mathbb{E}\\Big[RR(\\text{cft}(X);\\theta)\\Big]}\\) denote population average relative risk current (observed) conditions relative risk counterfactual scenario. \\(\\text{PIF}\\) represents potential impact fraction.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"","code":"pif_survey_bootstrap(   design,   theta,   rr,   cft = NULL,   additional_theta_arguments,   n_bootstrap_samples = NULL,   theta_distribution = \"default\",   parallel = TRUE,   num_cores = 1,   is_paf = FALSE,   ... )"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"design (survey.design, data.frame,tibble, svyrep.design) survey data structure. data comes survey set design survey::svydesign(). can also support survey::svrepdesign() design survey comes replicates. Finally, model can also accommodate data.frame tibble weights assuming simple random sampling without replacement. theta (vector/double) parameters relative risk function rr. rr (function/list) relative risk function two parameters: data.frame called X containing individual-level exposure covariates, theta (order). can also list several relative risk functions apply function different modelling scenario. cft (function/list) counterfactual function takes data.frame, X, individual-level exposure covariates returns new data.frame individual-level counterfactual exposure covariates. can also list several counterfactual functions apply function different modelling scenario. additional_theta_arguments additional information theta utilized obtaining bootstrap samples paramter. Options : (double) variance theta theta one dimensional asymptotical normality assumed (default). (vector) variances entry theta theta n-dimensional entries uncorrelated asymptotical normality assumed (default). (matrix) variance-covariance matrix theta theta n-dimensional entries correlated asymptotical normality assumed (default). list arguments pass via base::.call() theta_distribution simulate samples theta theta assumed asymptotically normally distributed. Optional n_bootstrap_samples (double) number bootstrap samples. svyrep.design passed argument, n_bootstrap_samples represents number number replicates design. theta_distribution (function) random number generator follows distribution estimator theta. default, theta assumed asymptotically normal thus theta_distribution set mvtnorm::rmvnorm() variance given additional_theta_arguments. number simulations theta_distribution function must parametrized parameter name n. parallel (boolean) Flag indicating whether computations parallel. Default TRUE. num_cores (int) Number cores; defaults parallel::detectCores(). is_paf (boolean) Whether function estimated Population Attributable Fraction (is_paf = TRUE) Potential Impact Fraction (is_paf = FALSE) ... Additional parameters svrep::as_bootstrap_design().","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"additional-parallelization-options","dir":"Reference","previous_headings":"","what":"Additional parallelization options","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"default function uses foreach::foreach parallelize creating cluster via doParallel::registerDoParallel. finner parallelization control can :","code":"#Create the cluster outside using whatever you want myCluster <- parallel::makeCluster(3, type = \"PSOCK\")  #Register the cluster doParallel::registerDoParallel(myCluster)  #Call the function using parallel = TRUE to use %dopar% and num_cores = NULL to avoid setting pif(..., parallel = TRUE, num_cores = NULL)  #Stop the cluster doParallel::stopCluster(myCluster)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"Chan CE, Zepeda-Tello R, Camacho-García-Formentí D, Cudhea F, Meza R, Rodrigues E, Spiegelman D, Barrientos-Gutierrez T, Zhou X (2023). “Nonparametric Estimation Potential Impact Fraction Population Attributable Fraction Individual-Level Aggregated Data.” 2207.03597.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pifpaf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pifpaf: Potential Impact Fraction and Population Attributable Fraction for Cross-Sectional Data — pifpaf-package","title":"pifpaf: Potential Impact Fraction and Population Attributable Fraction for Cross-Sectional Data — pifpaf-package","text":"Description: Uses generalized method estimate Potential Impact Fraction (PIF) Population Attributable Fraction (PAF) cross-sectional data. creates point-estimates, confidence intervals, estimates variance. addition, generates plots conducting sensitivity analysis.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pifpaf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pifpaf: Potential Impact Fraction and Population Attributable Fraction for Cross-Sectional Data — pifpaf-package","text":"Maintainer: Rodrigo Zepeda-Tello rzepeda17@gmail.com Authors: Dalia Camacho-García-Formentí contributors: Tonatiuh Barrientos-Gutiérrez [contributor] Ana Basto-Abreu [contributor] Ariela Braverman-Bronstein [contributor] Dèsirée Vidaña-Pérez [contributor] Frederick Cudhea [contributor]","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/print.pif_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an impact or attributable fraction — print.pif_sim","title":"Print an impact or attributable fraction — print.pif_sim","text":"Method printing potential impact fraction population attributable fraction","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/print.pif_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an impact or attributable fraction — print.pif_sim","text":"","code":"# S3 method for pif_sim print(x, max_sim_print = 10000, ...)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/print.pif_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an impact or attributable fraction — print.pif_sim","text":"x pif_sim object max_sim_print Maximum number simulations print ... Additional arguments pass summary.pif_sim","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/print.pif_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an impact or attributable fraction — print.pif_sim","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) print(pifsim) #> ── Potential Impact Fraction (PIF) ───────────────────────────────────────────── #>   potential_impact_fraction           type average_relative_risk #> 1               0.016696000 point_estimate             162091841 #> 2              -0.004029577     Lower 2.5%            -977919498 #> 3               0.037421577    Upper 97.5%            1302103181 #>   average_counterfactual   relative_risk   counterfactual #> 1              158923444 Relative_Risk_1 Counterfactual_1 #> 2             -958835385 Relative_Risk_1 Counterfactual_1 #> 3             1276682274 Relative_Risk_1 Counterfactual_1 #> ──────────────────────────────────────────────────────────────────────────────── #> • Number of bootstrap simulations: 10 #> ✖ A low number of bootstrap simulations will result in an unstable estimate. #> • Use `as.data.frame` to access values. #> • Use `summary` to save list of main results. print(pifsim, max_sim_print = 1) #> ── Potential Impact Fraction (PIF) ───────────────────────────────────────────── #> ℹ Too many simulations to print. #> ──────────────────────────────────────────────────────────────────────────────── #> • Number of bootstrap simulations: 10 #> ✖ A low number of bootstrap simulations will result in an unstable estimate. #> • Use `as.data.frame` to access values. #> • Use `summary` to save list of main results."},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/quantile_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract quantiles of the potential impact fraction or\npopulation attributable fraction bootstrap simulations — quantile_bootstrap","title":"Extract quantiles of the potential impact fraction or\npopulation attributable fraction bootstrap simulations — quantile_bootstrap","text":"Method obtaining variance-covariance matrix bootstrap simulations pif_sim object (.e. point-estimate potential impact fraction population attributable fraction via bootstrap).","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/quantile_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract quantiles of the potential impact fraction or\npopulation attributable fraction bootstrap simulations — quantile_bootstrap","text":"","code":"quantile_bootstrap(x, prob, ...)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/quantile_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract quantiles of the potential impact fraction or\npopulation attributable fraction bootstrap simulations — quantile_bootstrap","text":"x pif_sim object prob numeric vector probabilities values 0 1 ... additional arguments pass stats::quantile","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/quantile_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract quantiles of the potential impact fraction or\npopulation attributable fraction bootstrap simulations — quantile_bootstrap","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) quantile_bootstrap(pifsim, c(0.1, 0.3, 0.5)) #>     counterfactual   relative_risk potential_impact_fraction #> 1 Counterfactual_1 Relative_Risk_1               0.003411078 #> 2 Counterfactual_1 Relative_Risk_1               0.005972169 #> 3 Counterfactual_1 Relative_Risk_1               0.016093596 #>   average_relative_risk average_counterfactual quantile #> 1            0.03965779             0.03886453      0.1 #> 2            0.59575931             0.59662792      0.3 #> 3          365.12794098           352.98841330      0.5"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/sd_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract standard deviations of bootstrap simulations of potential impact fraction\nor population attributable fraction — sd_bootstrap","title":"Extract standard deviations of bootstrap simulations of potential impact fraction\nor population attributable fraction — sd_bootstrap","text":"Method obtaining standard deviartion bootstrap simulations x object (.e. point-estimate potential impact fraction population attributable fraction via bootstrap).","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/sd_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract standard deviations of bootstrap simulations of potential impact fraction\nor population attributable fraction — sd_bootstrap","text":"","code":"sd_bootstrap(x, ...)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/sd_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract standard deviations of bootstrap simulations of potential impact fraction\nor population attributable fraction — sd_bootstrap","text":"x pif_sim object ... additional arguments pass stats::sd()","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/sd_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract standard deviations of bootstrap simulations of potential impact fraction\nor population attributable fraction — sd_bootstrap","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) sd_bootstrap(pifsim) #>     counterfactual   relative_risk potential_impact_fraction #> 1 Counterfactual_1 Relative_Risk_1               0.008113613 #>   average_relative_risk average_counterfactual #> 1              44872.11               44052.14"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/summary.pif_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Return potential impact fraction or population attributable fraction summary — summary.pif_sim","title":"Return potential impact fraction or population attributable fraction summary — summary.pif_sim","text":"Method obtaining summary bootstrap simulations pif_sim object (.e. point-estimate potential impact fraction population attributable fraction via bootstrap).","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/summary.pif_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return potential impact fraction or population attributable fraction summary — summary.pif_sim","text":"","code":"# S3 method for pif_sim summary(   object,   parm = NULL,   level = 0.95,   method = c(\"wald\", \"percentile\"),   ... )"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/summary.pif_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return potential impact fraction or population attributable fraction summary — summary.pif_sim","text":"object pif_sim object parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level (double) Confidence level uncertainty interval. Defaults 0.95. method (string) either 'wald' (recommended) 'percentile' uncertainty intervals based upon bootstrap's percentile Wald-type approximation (see confidence interval section) ... Additional methods pass coef.pif_sim()","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/summary.pif_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return potential impact fraction or population attributable fraction summary — summary.pif_sim","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) summary(pifsim) #> $Type #> [1] \"Potential Impact Fraction (PIF)\" #>  #> $Number_of_bootstrap_simulations #> [1] 10 #>  #> $Point_estimates #>     counterfactual   relative_risk potential_impact_fraction #> 1 Counterfactual_1 Relative_Risk_1                0.01328824 #>   average_relative_risk average_counterfactual #> 1                519663               516767.3 #>  #> $Confidence_intervals #>     counterfactual   relative_risk potential_impact_fraction #> 1 Counterfactual_1 Relative_Risk_1              -0.009037961 #> 2 Counterfactual_1 Relative_Risk_1               0.035614439 #>   average_relative_risk average_counterfactual        type #> 1              -3026154               -3011413  Lower 2.5% #> 2               4065480                4044947 Upper 97.5% #>"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_cft.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the counterfactual function — validate_cft","title":"Validate the counterfactual function — validate_cft","text":"function validates cft argument valid","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_cft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the counterfactual function — validate_cft","text":"","code":"validate_cft(cft, is_paf)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_cft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the counterfactual function — validate_cft","text":"`rr` function","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_cft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the counterfactual function — validate_cft","text":"counterfactual function cft","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_confidence_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate confidence level — validate_confidence_level","title":"Validate confidence level — validate_confidence_level","text":"function takes confidence level input. can inputed : number 0 1. number 1 100 divided 100. input generates error.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_confidence_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate confidence level — validate_confidence_level","text":"","code":"validate_confidence_level(confidence_level = 0.95)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_confidence_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate confidence level — validate_confidence_level","text":"confidence_level (double) Confidence level uncertainty interval. 0 1 uses . 1 100 divides 100 transform probability. Defaults 0.95.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_confidence_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate confidence level — validate_confidence_level","text":"(double) list containing confidence level 0 1, values alpha 1 - alpha/2.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_is_paf.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the is_paf parameter — validate_is_paf","title":"Validate the is_paf parameter — validate_is_paf","text":"function validates is_paf argument valid","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_is_paf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the is_paf parameter — validate_is_paf","text":"","code":"validate_is_paf(is_paf)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_is_paf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the is_paf parameter — validate_is_paf","text":"`is_paf` boolean determining pif estimation actually paf","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_is_paf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the is_paf parameter — validate_is_paf","text":"boolean indicating whether paf pif","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_n_boostrap_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate n_bootstrap_samples — validate_n_boostrap_samples","title":"Validate n_bootstrap_samples — validate_n_boostrap_samples","text":"Internal function validate number bootstrap samples","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_n_boostrap_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate n_bootstrap_samples — validate_n_boostrap_samples","text":"","code":"validate_n_boostrap_samples(n_bootstrap_samples)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_n_boostrap_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate n_bootstrap_samples — validate_n_boostrap_samples","text":"n_bootstrap_samples number samples boostrap","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_n_boostrap_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate n_bootstrap_samples — validate_n_boostrap_samples","text":"valid n_bootstrap_samples (integer)","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_number_of_cores.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate number of cores — validate_number_of_cores","title":"Validate number of cores — validate_number_of_cores","text":"Internal function validate number cores variable model","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_number_of_cores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate number of cores — validate_number_of_cores","text":"","code":"validate_number_of_cores(num_cores)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_number_of_cores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate number of cores — validate_number_of_cores","text":"num_cores (int) Number cores; defaults parallel::detectCores().","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_number_of_cores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate number of cores — validate_number_of_cores","text":"integer number cores use.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_parallel_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate parallel setup — validate_parallel_setup","title":"Validate parallel setup — validate_parallel_setup","text":"Internal function validate parallelization return adecuate %% operator foreach.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_parallel_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate parallel setup — validate_parallel_setup","text":"","code":"validate_parallel_setup(parallel, num_cores)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_parallel_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate parallel setup — validate_parallel_setup","text":"parallel Boolean indicating whether run argument parallel num_cores Number cores run parallelization ","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_parallel_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate parallel setup — validate_parallel_setup","text":"function parallelize foreach::foreach() either %% %dopar%.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_return_replicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the return_replicates parameter — validate_return_replicates","title":"Validate the return_replicates parameter — validate_return_replicates","text":"function validates return_replicates argument valid","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_return_replicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the return_replicates parameter — validate_return_replicates","text":"","code":"validate_return_replicates(return_replicates)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_return_replicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the return_replicates parameter — validate_return_replicates","text":"`return_replicates` boolean determining pif estimation actually paf","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_return_replicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the return_replicates parameter — validate_return_replicates","text":"boolean indicating whether return replicate simulations ","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_rr.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the relative risk function — validate_rr","title":"Validate the relative risk function — validate_rr","text":"function validates rr argument valid","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_rr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the relative risk function — validate_rr","text":"","code":"validate_rr(rr)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_rr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the relative risk function — validate_rr","text":"`rr` function","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_rr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the relative risk function — validate_rr","text":"relative risk function rr","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_survey_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate design — validate_survey_design","title":"Validate design — validate_survey_design","text":"Internal function validate design whether svyrep.design survey.design.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_survey_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate design — validate_survey_design","text":"","code":"validate_survey_design(design, n_bootstrap_samples, ...)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_survey_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate design — validate_survey_design","text":"design svyrep.design, survey.design survey.design2 object.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_survey_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate design — validate_survey_design","text":"svyrep.design. design already svyrep.design returns design. Else returns bootstrap svyrep.design many n_bootstrap_samples","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_arguments.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the theta_distribution function — validate_theta_arguments","title":"Validate the theta_distribution function — validate_theta_arguments","text":"function validates theta_distribution indeed function one arguments n.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_arguments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the theta_distribution function — validate_theta_arguments","text":"","code":"validate_theta_arguments(theta_distribution, additional_theta_arguments, theta)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_arguments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the theta_distribution function — validate_theta_arguments","text":"`theta_distribution` random number simulator theta `additional_theta_arguments` list additional arguments use theta_distribution","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_arguments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the theta_distribution function — validate_theta_arguments","text":"random number generating function simulate theta .","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the theta_distribution function — validate_theta_distribution","title":"Validate the theta_distribution function — validate_theta_distribution","text":"function validates theta_distribution indeed function one arguments n.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the theta_distribution function — validate_theta_distribution","text":"","code":"validate_theta_distribution(theta_distribution, additional_theta_arguments)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the theta_distribution function — validate_theta_distribution","text":"`theta_distribution` random number simulator theta `additional_theta_arguments` list additional arguments use theta_distribution","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the theta_distribution function — validate_theta_distribution","text":"random number generating function simulate theta .","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/var_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the variance of bootstrap simulations of potential impact fraction\nor population attributable fraction — var_bootstrap","title":"Extract the variance of bootstrap simulations of potential impact fraction\nor population attributable fraction — var_bootstrap","text":"Method obtaining variance bootstrap simulations x object (.e. point-estimate potential impact fraction population attributable fraction via bootstrap).","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/var_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the variance of bootstrap simulations of potential impact fraction\nor population attributable fraction — var_bootstrap","text":"","code":"var_bootstrap(x, ...)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/var_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the variance of bootstrap simulations of potential impact fraction\nor population attributable fraction — var_bootstrap","text":"x pif_sim object ... additional arguments pass stats::var()","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/var_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the variance of bootstrap simulations of potential impact fraction\nor population attributable fraction — var_bootstrap","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) var_bootstrap(pifsim) #>     counterfactual   relative_risk potential_impact_fraction #> 1 Counterfactual_1 Relative_Risk_1              8.015602e-05 #>   average_relative_risk average_counterfactual #> 1          469823432037           468256128179"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/vcov.pif_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variance-covariance matrix of the potential impact fraction or\npopulation attributable fraction with average relative risk and average\ncounterfactual — vcov.pif_sim","title":"Extract variance-covariance matrix of the potential impact fraction or\npopulation attributable fraction with average relative risk and average\ncounterfactual — vcov.pif_sim","text":"Method obtaining variance-covariance matrix bootstrap simulations pif_sim object (.e. point-estimate potential impact fraction population attributable fraction via bootstrap).","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/vcov.pif_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variance-covariance matrix of the potential impact fraction or\npopulation attributable fraction with average relative risk and average\ncounterfactual — vcov.pif_sim","text":"","code":"# S3 method for pif_sim vcov(x, ...)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/vcov.pif_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variance-covariance matrix of the potential impact fraction or\npopulation attributable fraction with average relative risk and average\ncounterfactual — vcov.pif_sim","text":"x pif_sim object ... additional arguments pass stats::var","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/vcov.pif_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variance-covariance matrix of the potential impact fraction or\npopulation attributable fraction with average relative risk and average\ncounterfactual — vcov.pif_sim","text":"","code":"#Example 1 options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pifsim <- pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) vcov(pifsim) #>                           potential_impact_fraction average_relative_risk #> potential_impact_fraction              1.697371e-04          2.341099e+02 #> average_relative_risk                  2.341099e+02          2.305943e+09 #> average_counterfactual                 2.282505e+02          2.248143e+09 #>                           average_counterfactual #> potential_impact_fraction           2.282505e+02 #> average_relative_risk               2.248143e+09 #> average_counterfactual              2.191792e+09"}]
