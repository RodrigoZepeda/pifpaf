[{"path":"https://rodrigozepeda.github.io/pifpaf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 pifpaf authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/articles/Epidemiology-101.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Epidemiology 101: The attributable and impact fractions","text":"quick introduction Population Attributable Fractions Potential Impact Fractions comparative risk assessment perspective.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/articles/Epidemiology-101.html","id":"the-population-attributable-fraction","dir":"Articles","previous_headings":"","what":"The Population Attributable Fraction","title":"Epidemiology 101: The attributable and impact fractions","text":"Population Attributable Fraction (PAF) quantifies proportion disease (mortality) cases attributable exposure certain risk factor. PAF estimated constructing counterfactual scenario exposure risk factor Theoretical Minimum Risk Exposure Level (TMREL). level \\(0\\) exposure (e.g. lead cigarette smoke), ideal exposure level (e.g. sodium intake 2000 systolic blood pressure 120mmHg). example, consider population 1000 individuals consumption cigarretes measured. first 10 individuals shown : individual individual identifier, cigarretes total number cigarretes (units) consumed per day. population’s consumption look something like large proportion individuals consume \\(0\\) cigarretes.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/articles/Epidemiology-101.html","id":"the-potential-impact-fraction","dir":"Articles","previous_headings":"","what":"The Potential Impact Fraction","title":"Epidemiology 101: The attributable and impact fractions","text":"Potential Impact Fraction (PIF) represents generalization PAF. quantifies proportion disease (mortality) cases attributable change exposure certain risk factor. PAF particular case PIF change exposure reduction theoretical minimum risk level. However, levels exposure possible. example: intervention reduces population’s body mass index (BMI) 1 unit. ban smoking public spaces exposure second-hand cigarrete smoke halfed. Changing diet individuals","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/articles/Epidemiology-101.html","id":"the-purpose-of-the-pifpaf-package","dir":"Articles","previous_headings":"","what":"The purpose of the pifpaf package","title":"Epidemiology 101: The attributable and impact fractions","text":"pifpaf package allows users estimate population attributable fraction, pif, potential impact fraction, paf, cross-sectional studies come survey design using bootstrap algorithms Heeringa et al. (2015). two main scenarios use package: using individual-level data survey determine exposure independent source determine relative risk associated exposure (say metanalysis). case one use [pifpaf::pif()] [pifpaf::paf()]. using aggregated data survey determine exposure independent source determine relative risk associated exposure (say metanalysis). case one use [pifpaf::pif_approximate()] [pifpaf::paf_approximate()].","code":""},{"path":[]},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rodrigo Zepeda-Tello. Author, maintainer. Dalia Camacho-García-Formentí. Author. Francisco Reyes. Author. Tonatiuh Barrientos-Gutiérrez. Contributor. Ana Basto-Abreu. Contributor. Ariela Braverman-Bronstein. Contributor. Dèsirée Vidaña-Pérez. Contributor. Frederick Cudhea. Contributor.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zepeda-Tello R, Camacho-García-Formentí D, Reyes F (2023). pifpaf: Potential Impact Fraction Population Attributable Fraction Cross-Sectional Data. R package version 2.0.0, https://rodrigozepeda.github.io/pifpaf/.","code":"@Manual{,   title = {pifpaf: Potential Impact Fraction and Population Attributable Fraction for Cross-Sectional Data},   author = {Rodrigo Zepeda-Tello and Dalia Camacho-García-Formentí and Francisco Reyes},   year = {2023},   note = {R package version 2.0.0},   url = {https://rodrigozepeda.github.io/pifpaf/}, }"},{"path":"https://rodrigozepeda.github.io/pifpaf/index.html","id":"pifpaf-potential-impact-fraction-and-population-attributable-fraction-estimation-","dir":"","previous_headings":"","what":"pifpaf package","title":"pifpaf package","text":"STILL WORK PROCESS pifpaf package corresponds update previous homonimous package developed INSP.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"pifpaf package","text":"can install development version pifpaf GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"RodrigoZepeda/pifpaf\")"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/ensanut.html","id":null,"dir":"Reference","previous_headings":"","what":"ENSANUT 2018 — ensanut","title":"ENSANUT 2018 — ensanut","text":"Data Mexican National Health Nutrition Survey 2018 (ENSANUT-2018).","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/ensanut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ENSANUT 2018 — ensanut","text":"","code":"ensanut"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/ensanut.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ENSANUT 2018 — ensanut","text":"Information contains: tibble containing following information age Age individual (years). sex Sex individual (Male Female). weight Survey weights associated survey. strata Strata survey. hypertension individual hypertension TRUE, FALSE otherwise. delta_na_phase_1 Proposed change sodium consumption (counterfactual). systolic_blood_pressure Mean systolic blood pressure individual registered survey. age_group Age group individual","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/ensanut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ENSANUT 2018 — ensanut","text":"","code":"ensanut #> # A tibble: 1,333 × 8 #>      age sex     weight strata hypertension delta_na_phase_1 #>    <dbl> <chr>    <dbl>  <dbl> <lgl>                   <dbl> #>  1    28 Female  32134.    222 FALSE                    5.90 #>  2    24 Female  75955.    222 FALSE                   19.1  #>  3    45 Female  16076.    222 FALSE                   49.5  #>  4    39 Male    83463.    222 FALSE                    6.27 #>  5    41 Male    84735.    223 FALSE                    0    #>  6    61 Male   118741.    223 FALSE                    0    #>  7    46 Female  44085.    223 FALSE                   40.0  #>  8    48 Female  73051.    223 FALSE                   79.4  #>  9    23 Female  26276.    122 FALSE                   26.2  #> 10    69 Female  52114.    122 FALSE                    8.69 #> # ℹ 1,323 more rows #> # ℹ 2 more variables: systolic_blood_pressure <dbl>, age_group <fct> # Create a survey design as follows: options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/internal_pif_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Pif from dataframe — internal_pif_data_frame","title":"Pif from dataframe — internal_pif_data_frame","text":"Pif dataframe","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/internal_pif_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pif from dataframe — internal_pif_data_frame","text":"","code":"internal_pif_data_frame(df, theta, rr, cft, weights = NULL, is_paf = FALSE)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/internal_pif_data_frame.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pif from dataframe — internal_pif_data_frame","text":"previous version package function called pif.empirical.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":null,"dir":"Reference","previous_headings":"","what":"Population Attributable Fraction — paf","title":"Population Attributable Fraction — paf","text":"Estimates population attributable fraction, paf, individual-level exposure data (covariates), X, cross-sectional survey. Exposure assumed associated relative risk function, rr, parameter theta. counterfactual scenario function exposure cft assumed. population attributable fraction defined Chan et al. (2023)  :   \\[  \\text{PAF} = \\dfrac{\\mathbb{E}\\Big[RR(X;\\theta)\\Big] - 1}{\\mathbb{E}\\Big[RR(X;\\theta)\\Big]} \\] : \\(X\\) denotes individual-level matrix exposure covariates, \\(\\theta\\) represents additional parameters relative risk function, \\(RR(X,\\theta)\\) denotes relative risk exposure (covariates) level \\(X\\) given parameters \\(\\theta\\), \\({\\mathbb{E}\\Big[RR(X;\\theta)\\Big]}\\) represents average relative risk population \\(1\\) represents relative risk theoretical minimum risk scenario, \\(\\text{PAF}\\) represents population attributable fraction","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population Attributable Fraction — paf","text":"","code":"paf(   design,   theta,   rr,   additional_theta_arguments,   n_bootstrap_samples = NULL,   theta_distribution = \"default\",   uncertainty_interval_type = c(\"wald\", \"percentile\"),   parallel = TRUE,   num_cores = 1,   confidence_level = 0.95,   return_replicates = FALSE,   weights = NULL,   ... )"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Population Attributable Fraction — paf","text":"design (survey.design, data.frame,tibble, svyrep.design) survey data structure. data comes survey set design survey::svydesign(). can also support survey::svrepdesign() design survey comes replicates. Finally, model can also accommodate data.frame tibble weights assuming simple random sampling without replacement. theta (vector/double) parameters relative risk function rr. rr (function) relative risk function two parameters: data.frame called X containing individual-level exposure covariates, theta (order). additional_theta_arguments additional information theta utilized obtaining bootstrap samples paramter. Options : (double) variance theta theta one dimensional asymptotical normality assumed (default). (vector) variances entry theta theta n-dimensional entries uncorrelated asymptotical normality assumed (default). (matrix) variance-covariance matrix theta theta n-dimensional entries correlated asymptotical normality assumed (default). list arguments pass via base::.call() theta_distribution simulate samples theta theta assumed asymptotically normally distributed. Optional n_bootstrap_samples (double) number bootstrap samples. svyrep.design passed argument, n_bootstrap_samples represents number number replicates design. theta_distribution (function) random number generator follows distribution estimator theta. default, theta assumed asymptotically normal thus theta_distribution set mvtnorm::rmvnorm() variance given additional_theta_arguments. number simulations theta_distribution function must parametrized parameter name n. uncertainty_interval_type (string) either 'wald' (recommended) 'percentile' uncertainty intervals based upon bootstrap's percentile Wald-type approximation (see confidence interval section) parallel (boolean) Flag indicating whether computations parallel. Default TRUE. num_cores (int) Number cores; defaults parallel::detectCores(). confidence_level (double) Confidence level uncertainty interval. Defaults 0.95. return_replicates (boolean) Whether return simulated impact fractions . weights (vector) following recommended version use svydesign object design can still use weights associate weights estimation. Beware might give accurate estimations variance uncertainty intervals. ... Additional parameters svrep::as_bootstrap_design().","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":"confidence-intervals","dir":"Reference","previous_headings":"","what":"Confidence Intervals","title":"Population Attributable Fraction — paf","text":"Confidence intervals estimated via two methods specified Arnab (2017) . Wald-type confidence intervals (precise) form: \\[ \\widehat{\\text{PAF}} \\pm t_{1 - \\alpha/2} \\sqrt{\\widehat{\\text{Var}}_{\\text{B}}\\big[\\widehat{\\text{PIF}}\\big]} \\] \\(t_{1 - \\alpha/2}\\) stands percent points level \\(1 - \\alpha/2\\) Student's t-distribution, \\(\\widehat{\\text{Var}}_{\\text{B}}\\big[\\widehat{\\text{PIF}}\\big]\\) represents estimated variance (via bootstrap) potential impact fraction estimator. Percentile confidence intervals (less precise) form: \\[ \\Big[\\widehat{\\text{PAF}}_{\\text{B},\\alpha/2}, \\widehat{\\text{PAF}}_{\\text{B},1-\\alpha/2}\\Big] \\] \\(\\widehat{\\text{PAF}}_{\\text{B},k}\\) represents kth sample quantile bootstrap simulation potential impact fraction estimator.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":"additional-parallelization-options","dir":"Reference","previous_headings":"","what":"Additional parallelization options","title":"Population Attributable Fraction — paf","text":"default function uses foreach::foreach parallelize creating cluster via doParallel::registerDoParallel. finner parallelization control can :","code":"#Create the cluster outside using whatever you want myCluster <- parallel::makeCluster(3, type = \"PSOCK\")  #Register the cluster doParallel::registerDoParallel(myCluster)  #Call the function using parallel = TRUE to use %dopar% and num_cores = NULL to avoid setting paf(..., parallel = TRUE, num_cores = NULL)  #Stop the cluster doParallel::stopCluster(myCluster)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Population Attributable Fraction — paf","text":"Arnab R (2017). “Survey sampling theory applications.” chapter Variance Estimation: Complex Survey Designs. Academic Press. Chan CE, Zepeda-Tello R, Camacho-García-Formentí D, Cudhea F, Meza R, Rodrigues E, Spiegelman D, Barrientos-Gutierrez T, Zhou X (2023). “Nonparametric Estimation Potential Impact Fraction Population Attributable Fraction Individual-Level Aggregated Data.” 2207.03597.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/paf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Population Attributable Fraction — paf","text":"","code":"# Use the ensanut dataset data(ensanut)  # EXAMPLE 1 # Setup the survey design options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } paf(design,   theta = log(c(1.05, 1.38)), rr,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) #> $Point #> [1] -7.03754 #>  #> $Interval #>     Lower     Upper  #> -42.05064  27.97556  #>  #> $Confidence #> [1] 0.95 #>  #> $Standard_Deviation #> [1] 15.71406 #>  #> $`Uncertainty interval type` #> [1] \"wald\" #>   # EXAMPLE 2 # Now do the same but using a replicate design options(survey.lonely.psu = \"adjust\") rep_design <- svrep::as_bootstrap_design(design, replicates = 10) paf(rep_design,   theta = log(c(1.05, 1.38)), rr,   additional_theta_arguments = c(0.01, 0.03) ) #> $Point #> [1] -42.62475 #>  #> $Interval #>     Lower     Upper  #> -236.2600  151.0105  #>  #> $Confidence #> [1] 0.95 #>  #> $Standard_Deviation #> [1] 86.90446 #>  #> $`Uncertainty interval type` #> [1] \"wald\" #>"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":null,"dir":"Reference","previous_headings":"","what":"Potential Impact Fraction — pif","title":"Potential Impact Fraction — pif","text":"Estimates potential impact fraction, pif, individual-level exposure data (covariates), X, cross-sectional survey. Exposure assumed associated relative risk function, rr, parameter theta. counterfactual scenario function exposure cft assumed. potential impact fraction defined Chan et al. (2023) :   \\[  \\text{PIF} = \\dfrac{\\mathbb{E}\\Big[RR(X;\\theta)\\Big] -    \\mathbb{E}\\Big[RR\\big(\\text{cft}(X);\\theta\\big)\\Big]}{\\mathbb{E}\\Big[RR(X;\\theta)\\Big]} \\] : \\(X\\) denotes individual-level matrix exposure covariates, \\(\\theta\\) represents additional parameters relative risk function, \\(RR(X,\\theta)\\) denotes relative risk exposure (covariates) level \\(X\\) given parameters \\(\\theta\\), \\(cft(X)\\) denotes counterfactual function applied exposure covariates, \\({\\mathbb{E}\\Big[RR(X;\\theta)\\Big]}\\) \\({\\mathbb{E}\\Big[RR(\\text{cft}(X);\\theta)\\Big]}\\) denote population average relative risk current (observed) conditions relative risk counterfactual scenario. \\(\\text{PIF}\\) represents potential impact fraction.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Potential Impact Fraction — pif","text":"","code":"pif(   design,   theta,   rr,   cft = NULL,   additional_theta_arguments,   n_bootstrap_samples = NULL,   theta_distribution = \"default\",   uncertainty_interval_type = c(\"wald\", \"percentile\"),   parallel = TRUE,   num_cores = 1,   confidence_level = 0.95,   return_replicates = FALSE,   is_paf = FALSE,   weights = NULL,   ... )"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Potential Impact Fraction — pif","text":"design (survey.design, data.frame,tibble, svyrep.design) survey data structure. data comes survey set design survey::svydesign(). can also support survey::svrepdesign() design survey comes replicates. Finally, model can also accommodate data.frame tibble weights assuming simple random sampling without replacement. theta (vector/double) parameters relative risk function rr. rr (function) relative risk function two parameters: data.frame called X containing individual-level exposure covariates, theta (order). cft (function) counterfactual function takes data.frame, X, individual-level exposure covariates returns new data.frame individual-level counterfactual exposure covariates. additional_theta_arguments additional information theta utilized obtaining bootstrap samples paramter. Options : (double) variance theta theta one dimensional asymptotical normality assumed (default). (vector) variances entry theta theta n-dimensional entries uncorrelated asymptotical normality assumed (default). (matrix) variance-covariance matrix theta theta n-dimensional entries correlated asymptotical normality assumed (default). list arguments pass via base::.call() theta_distribution simulate samples theta theta assumed asymptotically normally distributed. Optional n_bootstrap_samples (double) number bootstrap samples. svyrep.design passed argument, n_bootstrap_samples represents number number replicates design. theta_distribution (function) random number generator follows distribution estimator theta. default, theta assumed asymptotically normal thus theta_distribution set mvtnorm::rmvnorm() variance given additional_theta_arguments. number simulations theta_distribution function must parametrized parameter name n. uncertainty_interval_type (string) either 'wald' (recommended) 'percentile' uncertainty intervals based upon bootstrap's percentile Wald-type approximation (see confidence interval section) parallel (boolean) Flag indicating whether computations parallel. Default TRUE. num_cores (int) Number cores; defaults parallel::detectCores(). confidence_level (double) Confidence level uncertainty interval. Defaults 0.95. return_replicates (boolean) Whether return simulated impact fractions . is_paf (boolean) Whether function estimated Population Attributable Fraction (is_paf = TRUE) Potential Impact Fraction (is_paf = FALSE) weights (vector) following recommended version use svydesign object design can still use weights associate weights estimation. Beware might give accurate estimations variance uncertainty intervals. ... Additional parameters svrep::as_bootstrap_design().","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"confidence-intervals","dir":"Reference","previous_headings":"","what":"Confidence Intervals","title":"Potential Impact Fraction — pif","text":"Confidence intervals estimated via two methods specified Arnab (2017) . Wald-type confidence intervals (precise) form: \\[ \\widehat{\\text{PIF}} \\pm t_{1 - \\alpha/2} \\sqrt{\\widehat{\\text{Var}}_{\\text{B}}\\big[\\widehat{\\text{PIF}}\\big]} \\] \\(t_{1 - \\alpha/2}\\) stands percent points level \\(1 - \\alpha/2\\) Student's t-distribution, \\(\\widehat{\\text{Var}}_{\\text{B}}\\big[\\widehat{\\text{PIF}}\\big]\\) represents estimated variance (via bootstrap) potential impact fraction estimator. Percentile confidence intervals (less precise) form: \\[ \\Big[\\widehat{\\text{PIF}}_{\\text{B},\\alpha/2}, \\widehat{\\text{PIF}}_{\\text{B},1-\\alpha/2}\\Big] \\] \\(\\widehat{\\text{PIF}}_{\\text{B},k}\\) represents kth sample quantile bootstrap simulation potential impact fraction estimator.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"additional-parallelization-options","dir":"Reference","previous_headings":"","what":"Additional parallelization options","title":"Potential Impact Fraction — pif","text":"default function uses foreach::foreach parallelize creating cluster via doParallel::registerDoParallel. finner parallelization control can :","code":"#Create the cluster outside using whatever you want myCluster <- parallel::makeCluster(3, type = \"PSOCK\")  #Register the cluster doParallel::registerDoParallel(myCluster)  #Call the function using parallel = TRUE to use %dopar% and num_cores = NULL to avoid setting pif(..., parallel = TRUE, num_cores = NULL)  #Stop the cluster doParallel::stopCluster(myCluster)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Potential Impact Fraction — pif","text":"Arnab R (2017). “Survey sampling theory applications.” chapter Variance Estimation: Complex Survey Designs. Academic Press. Chan CE, Zepeda-Tello R, Camacho-García-Formentí D, Cudhea F, Meza R, Rodrigues E, Spiegelman D, Barrientos-Gutierrez T, Zhou X (2023). “Nonparametric Estimation Potential Impact Fraction Population Attributable Fraction Individual-Level Aggregated Data.” 2207.03597.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Potential Impact Fraction — pif","text":"","code":"# Use the ensanut dataset data(ensanut)  # EXAMPLE 1 # Setup the survey design options(survey.lonely.psu = \"adjust\") design <- survey::svydesign(data = ensanut, ids = ~1, weights = ~weight, strata = ~strata) rr <- function(X, theta) {   exp(-2 +     theta[1] * X[, \"age\"] + theta[2] * X[, \"systolic_blood_pressure\"] / 100) } cft <- function(X) {   X[, \"systolic_blood_pressure\"] <- X[, \"systolic_blood_pressure\"] - 5   return(X) } pif(design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03), n_bootstrap_samples = 10, parallel = FALSE ) #> $Point #> [1] 0.01493412 #>  #> $Interval #>        Lower        Upper  #> -0.005071922  0.034940153  #>  #> $Confidence #> [1] 0.95 #>  #> $Standard_Deviation #> [1] 0.008978811 #>  #> $`Uncertainty interval type` #> [1] \"wald\" #>   # EXAMPLE 2 # Now do the same but using a replicate design options(survey.lonely.psu = \"adjust\") rep_design <- svrep::as_bootstrap_design(design, replicates = 10) pif(rep_design,   theta = log(c(1.05, 1.38)), rr, cft,   additional_theta_arguments = c(0.01, 0.03) ) #> $Point #> [1] 0.01317647 #>  #> $Interval #>        Lower        Upper  #> -0.007221684  0.033574619  #>  #> $Confidence #> [1] 0.95 #>  #> $Standard_Deviation #> [1] 0.009154794 #>  #> $`Uncertainty interval type` #> [1] \"wald\" #>"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Pif from dataframe — pif_data_frame","title":"Pif from dataframe — pif_data_frame","text":"Pif dataframe","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pif from dataframe — pif_data_frame","text":"","code":"pif_data_frame(df, theta, rr, cft, weights = NULL, is_paf = FALSE)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_data_frame.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pif from dataframe — pif_data_frame","text":"previous version package function called pif.empirical.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"Estimates potential impact fraction, pif, individual-level exposure data (covariates), X, cross-sectional survey. Exposure assumed associated relative risk function, rr, parameter theta. counterfactual scenario function exposure cft assumed. potential impact fraction defined Chan et al. (2023) :   \\[  \\text{PIF} = \\dfrac{\\mathbb{E}\\Big[RR(X;\\theta)\\Big] -    \\mathbb{E}\\Big[RR\\big(\\text{cft}(X);\\theta\\big)\\Big]}{\\mathbb{E}\\Big[RR(X;\\theta)\\Big]} \\] : \\(X\\) denotes individual-level matrix exposure covariates, \\(\\theta\\) represents additional parameters relative risk function, \\(RR(X,\\theta)\\) denotes relative risk exposure (covariates) level \\(X\\) given parameters \\(\\theta\\), \\(cft(X)\\) denotes counterfactual function applied exposure covariates, \\({\\mathbb{E}\\Big[RR(X;\\theta)\\Big]}\\) \\({\\mathbb{E}\\Big[RR(\\text{cft}(X);\\theta)\\Big]}\\) denote population average relative risk current (observed) conditions relative risk counterfactual scenario. \\(\\text{PIF}\\) represents potential impact fraction.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"","code":"pif_survey_bootstrap(   design,   theta,   rr,   cft = NULL,   additional_theta_arguments,   n_bootstrap_samples = NULL,   theta_distribution = \"default\",   uncertainty_interval_type = c(\"wald\", \"percentile\"),   parallel = TRUE,   num_cores = 1,   confidence_level = 0.95,   return_replicates = FALSE,   is_paf = FALSE,   ... )"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"design (survey.design, data.frame,tibble, svyrep.design) survey data structure. data comes survey set design survey::svydesign(). can also support survey::svrepdesign() design survey comes replicates. Finally, model can also accommodate data.frame tibble weights assuming simple random sampling without replacement. theta (vector/double) parameters relative risk function rr. rr (function) relative risk function two parameters: data.frame called X containing individual-level exposure covariates, theta (order). cft (function) counterfactual function takes data.frame, X, individual-level exposure covariates returns new data.frame individual-level counterfactual exposure covariates. additional_theta_arguments additional information theta utilized obtaining bootstrap samples paramter. Options : (double) variance theta theta one dimensional asymptotical normality assumed (default). (vector) variances entry theta theta n-dimensional entries uncorrelated asymptotical normality assumed (default). (matrix) variance-covariance matrix theta theta n-dimensional entries correlated asymptotical normality assumed (default). list arguments pass via base::.call() theta_distribution simulate samples theta theta assumed asymptotically normally distributed. Optional n_bootstrap_samples (double) number bootstrap samples. svyrep.design passed argument, n_bootstrap_samples represents number number replicates design. theta_distribution (function) random number generator follows distribution estimator theta. default, theta assumed asymptotically normal thus theta_distribution set mvtnorm::rmvnorm() variance given additional_theta_arguments. number simulations theta_distribution function must parametrized parameter name n. uncertainty_interval_type (string) either 'wald' (recommended) 'percentile' uncertainty intervals based upon bootstrap's percentile Wald-type approximation (see confidence interval section) parallel (boolean) Flag indicating whether computations parallel. Default TRUE. num_cores (int) Number cores; defaults parallel::detectCores(). confidence_level (double) Confidence level uncertainty interval. Defaults 0.95. return_replicates (boolean) Whether return simulated impact fractions . is_paf (boolean) Whether function estimated Population Attributable Fraction (is_paf = TRUE) Potential Impact Fraction (is_paf = FALSE) ... Additional parameters svrep::as_bootstrap_design().","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"confidence-intervals","dir":"Reference","previous_headings":"","what":"Confidence Intervals","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"Confidence intervals estimated via two methods specified Arnab (2017) . Wald-type confidence intervals (precise) form: \\[ \\widehat{\\text{PIF}} \\pm t_{1 - \\alpha/2} \\sqrt{\\widehat{\\text{Var}}_{\\text{B}}\\big[\\widehat{\\text{PIF}}\\big]} \\] \\(t_{1 - \\alpha/2}\\) stands percent points level \\(1 - \\alpha/2\\) Student's t-distribution, \\(\\widehat{\\text{Var}}_{\\text{B}}\\big[\\widehat{\\text{PIF}}\\big]\\) represents estimated variance (via bootstrap) potential impact fraction estimator. Percentile confidence intervals (less precise) form: \\[ \\Big[\\widehat{\\text{PIF}}_{\\text{B},\\alpha/2}, \\widehat{\\text{PIF}}_{\\text{B},1-\\alpha/2}\\Big] \\] \\(\\widehat{\\text{PIF}}_{\\text{B},k}\\) represents kth sample quantile bootstrap simulation potential impact fraction estimator.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"additional-parallelization-options","dir":"Reference","previous_headings":"","what":"Additional parallelization options","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"default function uses foreach::foreach parallelize creating cluster via doParallel::registerDoParallel. finner parallelization control can :","code":"#Create the cluster outside using whatever you want myCluster <- parallel::makeCluster(3, type = \"PSOCK\")  #Register the cluster doParallel::registerDoParallel(myCluster)  #Call the function using parallel = TRUE to use %dopar% and num_cores = NULL to avoid setting pif(..., parallel = TRUE, num_cores = NULL)  #Stop the cluster doParallel::stopCluster(myCluster)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pif_survey_bootstrap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Potential Impact Fraction via bootstrap for survey data — pif_survey_bootstrap","text":"Arnab R (2017). “Survey sampling theory applications.” chapter Variance Estimation: Complex Survey Designs. Academic Press. Chan CE, Zepeda-Tello R, Camacho-García-Formentí D, Cudhea F, Meza R, Rodrigues E, Spiegelman D, Barrientos-Gutierrez T, Zhou X (2023). “Nonparametric Estimation Potential Impact Fraction Population Attributable Fraction Individual-Level Aggregated Data.” 2207.03597.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pifpaf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pifpaf: Potential Impact Fraction and Population Attributable Fraction for Cross-Sectional Data — pifpaf-package","title":"pifpaf: Potential Impact Fraction and Population Attributable Fraction for Cross-Sectional Data — pifpaf-package","text":"Description: Uses generalized method estimate Potential Impact Fraction (PIF) Population Attributable Fraction (PAF) cross-sectional data. creates point-estimates, confidence intervals, estimates variance. addition, generates plots conducting sensitivity analysis.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/pifpaf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pifpaf: Potential Impact Fraction and Population Attributable Fraction for Cross-Sectional Data — pifpaf-package","text":"Maintainer: Rodrigo Zepeda-Tello rzepeda17@gmail.com Authors: Dalia Camacho-García-Formentí Francisco Reyes contributors: Tonatiuh Barrientos-Gutiérrez [contributor] Ana Basto-Abreu [contributor] Ariela Braverman-Bronstein [contributor] Dèsirée Vidaña-Pérez [contributor] Frederick Cudhea [contributor]","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_cft.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the counterfactual function — validate_cft","title":"Validate the counterfactual function — validate_cft","text":"function validates cft argument valid","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_cft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the counterfactual function — validate_cft","text":"","code":"validate_cft(cft, is_paf)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_cft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the counterfactual function — validate_cft","text":"`rr` function","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_cft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the counterfactual function — validate_cft","text":"counterfactual function cft","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_confidence_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate confidence level — validate_confidence_level","title":"Validate confidence level — validate_confidence_level","text":"function takes confidence level input. can inputed : number 0 1. number 1 100 divided 100. input generates error.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_confidence_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate confidence level — validate_confidence_level","text":"","code":"validate_confidence_level(confidence_level = 0.95)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_confidence_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate confidence level — validate_confidence_level","text":"confidence_level (double) Confidence level uncertainty interval. 0 1 uses . 1 100 divides 100 transform probability. Defaults 0.95.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_confidence_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate confidence level — validate_confidence_level","text":"(double) list containing confidence level 0 1, values alpha 1 - alpha/2.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_is_paf.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the is_paf parameter — validate_is_paf","title":"Validate the is_paf parameter — validate_is_paf","text":"function validates is_paf argument valid","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_is_paf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the is_paf parameter — validate_is_paf","text":"","code":"validate_is_paf(is_paf)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_is_paf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the is_paf parameter — validate_is_paf","text":"`is_paf` boolean determining pif estimation actually paf","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_is_paf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the is_paf parameter — validate_is_paf","text":"boolean indicating whether paf pif","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_n_boostrap_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate n_bootstrap_samples — validate_n_boostrap_samples","title":"Validate n_bootstrap_samples — validate_n_boostrap_samples","text":"Internal function validate number bootstrap samples","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_n_boostrap_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate n_bootstrap_samples — validate_n_boostrap_samples","text":"","code":"validate_n_boostrap_samples(n_bootstrap_samples)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_n_boostrap_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate n_bootstrap_samples — validate_n_boostrap_samples","text":"n_bootstrap_samples number samples boostrap","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_n_boostrap_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate n_bootstrap_samples — validate_n_boostrap_samples","text":"valid n_bootstrap_samples (integer)","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_number_of_cores.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate number of cores — validate_number_of_cores","title":"Validate number of cores — validate_number_of_cores","text":"Internal function validate number cores variable model","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_number_of_cores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate number of cores — validate_number_of_cores","text":"","code":"validate_number_of_cores(num_cores)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_number_of_cores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate number of cores — validate_number_of_cores","text":"num_cores (int) Number cores; defaults parallel::detectCores().","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_number_of_cores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate number of cores — validate_number_of_cores","text":"integer number cores use.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_parallel_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate parallel setup — validate_parallel_setup","title":"Validate parallel setup — validate_parallel_setup","text":"Internal function validate parallelization return adecuate %% operator foreach.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_parallel_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate parallel setup — validate_parallel_setup","text":"","code":"validate_parallel_setup(parallel, num_cores)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_parallel_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate parallel setup — validate_parallel_setup","text":"parallel Boolean indicating whether run argument parallel num_cores Number cores run parallelization ","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_parallel_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate parallel setup — validate_parallel_setup","text":"function parallelize foreach::foreach() either %% %dopar%.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_return_replicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the return_replicates parameter — validate_return_replicates","title":"Validate the return_replicates parameter — validate_return_replicates","text":"function validates return_replicates argument valid","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_return_replicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the return_replicates parameter — validate_return_replicates","text":"","code":"validate_return_replicates(return_replicates)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_return_replicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the return_replicates parameter — validate_return_replicates","text":"`return_replicates` boolean determining pif estimation actually paf","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_return_replicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the return_replicates parameter — validate_return_replicates","text":"boolean indicating whether return replicate simulations ","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_rr.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the relative risk function — validate_rr","title":"Validate the relative risk function — validate_rr","text":"function validates rr argument valid","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_rr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the relative risk function — validate_rr","text":"","code":"validate_rr(rr)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_rr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the relative risk function — validate_rr","text":"`rr` function","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_rr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the relative risk function — validate_rr","text":"relative risk function rr","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_survey_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate design — validate_survey_design","title":"Validate design — validate_survey_design","text":"Internal function validate design whether svyrep.design survey.design.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_survey_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate design — validate_survey_design","text":"","code":"validate_survey_design(design, n_bootstrap_samples, ...)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_survey_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate design — validate_survey_design","text":"design svyrep.design, survey.design survey.design2 object.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_survey_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate design — validate_survey_design","text":"svyrep.design. design already svyrep.design returns design. Else returns bootstrap svyrep.design many n_bootstrap_samples","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_arguments.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the theta_distribution function — validate_theta_arguments","title":"Validate the theta_distribution function — validate_theta_arguments","text":"function validates theta_distribution indeed function one arguments n.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_arguments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the theta_distribution function — validate_theta_arguments","text":"","code":"validate_theta_arguments(theta_distribution, additional_theta_arguments, theta)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_arguments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the theta_distribution function — validate_theta_arguments","text":"`theta_distribution` random number simulator theta `additional_theta_arguments` list additional arguments use theta_distribution","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_arguments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the theta_distribution function — validate_theta_arguments","text":"random number generating function simulate theta .","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the theta_distribution function — validate_theta_distribution","title":"Validate the theta_distribution function — validate_theta_distribution","text":"function validates theta_distribution indeed function one arguments n.","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the theta_distribution function — validate_theta_distribution","text":"","code":"validate_theta_distribution(theta_distribution, additional_theta_arguments)"},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the theta_distribution function — validate_theta_distribution","text":"`theta_distribution` random number simulator theta `additional_theta_arguments` list additional arguments use theta_distribution","code":""},{"path":"https://rodrigozepeda.github.io/pifpaf/reference/validate_theta_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the theta_distribution function — validate_theta_distribution","text":"random number generating function simulate theta .","code":""}]
